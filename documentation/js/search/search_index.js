var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.362,1,2.126]],["body/controllers/AppController.html",[0,2.34,1,3.652,2,1.947,3,0.394,4,0.341,5,0.341,6,3.899,7,0.473,8,0.029,9,0.504,10,3.223,11,3.899,12,0.394,13,0.149,14,2.502,15,1.801,16,0.025,17,0.025]],["title/modules/AppModule.html",[18,1.003,19,2.126]],["body/modules/AppModule.html",[1,3.276,2,1.838,3,0.271,4,0.235,5,0.235,7,0.523,8,0.03,9,0.347,10,3.143,11,2.681,12,0.271,13,0.103,16,0.019,17,0.019,18,1.545,19,4.291,20,1.339,21,1.339,22,1.577,23,1.577,24,1.339,25,2.472,26,1.577,27,2.681,28,2.681,29,2.681,30,3.45,31,3.143,32,2.65,33,3.143,34,3.143,35,1.801,36,2.164,37,1.577,38,1.238,39,3.194,40,2.869,41,3.194,42,3.194,43,3.194,44,3.194,45,3.194,46,3.194,47,3.194]],["title/injectables/AppService.html",[10,1.75,48,0.275]],["body/injectables/AppService.html",[3,0.381,4,0.331,5,0.331,7,0.381,8,0.029,9,0.488,10,2.948,12,0.381,13,0.145,16,0.024,17,0.024,48,0.464,49,1.388,50,3.774,51,0.665,52,1.344,53,6.14,54,0.868,55,4.497,56,1.021,57,1.822,58,1.287,59,4.497,60,4.497]],["title/controllers/ArchivesController.html",[0,1.362,61,2.126]],["body/controllers/ArchivesController.html",[0,1.772,2,1.772,3,0.358,4,0.311,5,0.311,7,0.486,8,0.029,9,0.459,12,0.358,13,0.136,14,2.276,16,0.023,17,0.023,51,0.625,52,1.293,54,0.815,56,0.959,58,1.209,61,3.447,62,3.547,63,3.1,64,4.226,65,5.043,66,2.276,67,4.226,68,3.092,69,3.547,70,3.1,71,2.765,72,4.226,73,4.226,74,4.226]],["title/modules/ArchivesModule.html",[18,1.003,30,1.921]],["body/modules/ArchivesModule.html",[2,2.105,3,0.332,4,0.288,5,0.288,7,0.495,8,0.029,9,0.425,12,0.332,13,0.126,16,0.022,17,0.022,18,1.71,20,1.642,21,1.642,22,1.934,23,1.934,24,1.642,25,2.735,26,1.934,30,3.764,32,2.808,36,2.478,37,1.934,38,1.519,40,3.286,61,3.626,68,3.33,69,3.288,75,3.288,76,3.917,77,3.288,78,3.917,79,3.917,80,2.873]],["title/injectables/ArchivesService.html",[48,0.275,68,1.75]],["body/injectables/ArchivesService.html",[3,0.348,4,0.302,5,0.302,7,0.438,8,0.029,9,0.445,12,0.348,13,0.132,14,2.21,15,1.591,16,0.023,17,0.023,35,1.931,48,0.438,49,1.266,51,0.607,52,1.269,54,0.998,56,0.931,58,1.174,65,4.99,68,2.785,81,3.444,82,1.62,83,1.473,84,2.685,85,4.103,86,1.174,87,1.007,88,0.792,89,1.174,90,4.103,91,1.72,92,2.025,93,1.174,94,4.103]],["title/controllers/AuthController.html",[0,1.362,95,2.126]],["body/controllers/AuthController.html",[0,1.052,2,1.052,3,0.213,4,0.185,5,0.185,7,0.484,8,0.03,9,0.272,12,0.213,13,0.081,16,0.016,17,0.016,51,0.371,52,0.907,54,0.933,56,1.097,58,1.383,63,1.841,66,2.604,70,1.841,71,1.642,82,1.741,83,0.901,86,1.254,87,1.076,88,0.846,89,1.254,91,2.026,93,0.718,95,2.417,96,2.107,97,2.51,98,3.215,99,3.679,100,4.057,101,3.215,102,1.841,103,3.24,104,4.231,105,2.51,106,2.51,107,2.51,108,1.841,109,2.51,110,2.51,111,2.51,112,2.51,113,1.841,114,2.386,115,2.51,116,2.51,117,2.184,118,3.1,119,2.107,120,3.679,121,4.834,122,2.107,123,1.642,124,1.699,125,1.642,126,1.352,127,1.484,128,2.51,129,2.361,130,2.107,131,1.841,132,2.51,133,2.51,134,2.51,135,1.678,136,2.51,137,4.383,138,2.163,139,2.51,140,2.51,141,2.51,142,3.1,143,2.51,144,2.51,145,2.51,146,2.51,147,2.51,148,1.642,149,2.107,150,2.51,151,1.642]],["title/guards/AuthGuard.html",[127,1.921,152,2.383]],["body/guards/AuthGuard.html",[3,0.246,4,0.213,5,0.213,7,0.438,8,0.03,9,0.314,12,0.246,13,0.093,15,1.589,16,0.018,17,0.018,48,0.347,51,0.429,52,1.006,54,0.917,56,0.93,57,1.364,58,1.172,82,1.36,83,1.471,86,1.36,87,1.167,88,0.917,89,1.36,93,1.172,103,3.048,124,2.256,125,1.896,126,1.561,127,2.422,135,2.476,138,1.43,153,2.898,154,2.432,155,5.167,156,3.439,157,2.898,158,4.151,159,2.898,160,4.098,161,5.167,162,2.898,163,2.898,164,2.207,165,3.005,166,2.898,167,4.098,168,1.713,169,2.422,170,1.896,171,2.285,172,2.898,173,3.567,174,2.125,175,2.346,176,1.843,177,2.898,178,2.898,179,1.896,180,4.098,181,2.898,182,2.898,183,1.896,184,2.432,185,2.898,186,3.005,187,2.125,188,2.125,189,1.561]],["title/modules/AuthModule.html",[18,1.003,31,1.75]],["body/modules/AuthModule.html",[2,1.711,3,0.244,4,0.212,5,0.212,7,0.525,8,0.03,9,0.313,12,0.244,13,0.093,16,0.018,17,0.018,18,1.463,20,1.209,21,1.209,22,1.423,23,1.423,24,1.209,25,2.34,26,2.34,31,3.458,32,2.566,33,3.043,34,2.199,36,2.015,37,1.423,38,1.118,40,2.671,80,2.115,95,3.102,124,2.423,125,1.887,129,3.043,130,2.42,168,1.704,190,2.42,191,2.883,192,2.42,193,2.42,194,2.695,195,2.789,196,2.883,197,2.199,198,2.883,199,4.083,200,2.883,201,2.883,202,2.671,203,2.883,204,2.883,205,2.115,206,2.115,207,2.883,208,2.115,209,2.115,210,2.883,211,2.115,212,2.115,213,2.883,214,2.883]],["title/injectables/AuthService.html",[48,0.275,124,1.26]],["body/injectables/AuthService.html",[3,0.112,4,0.097,5,0.097,7,0.401,8,0.03,9,0.144,12,0.112,13,0.043,15,1.309,16,0.01,17,0.01,35,1.042,38,0.513,48,0.189,49,0.408,51,0.196,52,0.546,54,0.914,56,1.033,57,1.899,58,1.355,82,1.662,83,0.799,86,1.355,87,1.202,88,0.914,89,1.355,91,1.71,92,0.653,93,1.44,98,2.112,99,1.868,101,1.632,102,1.632,103,2.636,104,3.768,108,1.632,113,1.632,114,1.666,117,0.782,123,0.866,124,0.863,126,0.713,135,2.068,138,0.653,148,0.866,151,0.866,156,1.868,158,3.181,164,1.199,165,1.632,168,0.782,169,0.782,171,2.204,173,2.979,174,0.97,175,1.421,176,1.116,186,1.632,187,0.97,188,0.97,189,0.713,195,2.141,197,0.713,205,0.97,206,0.97,208,2.762,209,2.112,211,1.632,212,0.97,215,0.97,216,2.417,217,2.225,218,2.225,219,2.225,220,1.11,221,2.141,222,1.909,223,1.323,224,1.632,225,1.323,226,3.181,227,1.323,228,2.411,229,1.97,230,2.141,231,2.336,232,1.323,233,2.992,234,1.868,235,1.323,236,0.653,237,1.323,238,1.323,239,1.323,240,1.868,241,3.203,242,1.323,243,1.868,244,1.323,245,0.97,246,0.866,247,1.456,248,1.11,249,0.97,250,0.782,251,0.866,252,2.669,253,0.866,254,1.11,255,1.11,256,1.199,257,0.713,258,1.632,259,1.868,260,1.11,261,1.11,262,1.632,263,1.11,264,1.868,265,1.034,266,1.11,267,0.97,268,0.97,269,0.97,270,2.417,271,1.11,272,1.632,273,1.11,274,0.97,275,1.632,276,1.632,277,1.884,278,1.632,279,1.632,280,1.632,281,1.884,282,2.112,283,0.97,284,2.112,285,1.632,286,0.97,287,0.97,288,1.868,289,0.97,290,0.97,291,0.97,292,0.97,293,1.11,294,1.11,295,1.11,296,1.868,297,1.868,298,1.868,299,1.868,300,1.11,301,1.11,302,1.11,303,1.11,304,1.632,305,1.11,306,1.11,307,1.11,308,1.11,309,1.11,310,1.11,311,1.11,312,1.11,313,1.11,314,1.868,315,1.11,316,1.11,317,1.11,318,1.11]],["title/injectables/BcryptProvider.html",[48,0.275,202,2.126]],["body/injectables/BcryptProvider.html",[3,0.291,4,0.252,5,0.252,7,0.44,8,0.03,9,0.372,12,0.291,13,0.11,16,0.02,17,0.02,48,0.39,49,1.058,51,0.507,52,1.129,54,0.887,56,1.044,57,2.086,58,1.316,82,1.486,86,1.316,87,1.129,88,0.887,89,1.316,93,0.981,164,2.989,170,2.243,171,1.437,194,2.089,202,3.01,236,1.692,247,3.01,257,2.478,319,2.877,320,3.397,321,3.861,322,3.861,323,3.861,324,5.001,325,3.428,326,3.861,327,4.858,328,3.428,329,2.877,330,3.428,331,5.192,332,3.428,333,3.428,334,3.428]],["title/classes/CreateUserDto.html",[13,0.105,335,1.75]],["body/classes/CreateUserDto.html",[3,0.326,4,0.283,5,0.283,7,0.326,8,0.029,12,0.326,13,0.16,16,0.022,17,0.022,51,0.569,54,1.12,57,2.049,66,3.128,87,1.349,88,1.12,228,2.936,229,2.497,230,2.713,236,2.713,335,2.675,336,2.519,337,3.231,338,2.451,339,4.613,340,3.85,341,4.259,342,3.85,343,4.966,344,3.85,345,3.85,346,3.85,347,4.168,348,3.85,349,3.85,350,2.519]],["title/injectables/CreateUserProvider.html",[48,0.275,351,1.75]],["body/injectables/CreateUserProvider.html",[3,0.214,4,0.186,5,0.186,7,0.458,8,0.03,9,0.274,12,0.214,13,0.081,15,1.88,16,0.016,17,0.016,35,1.497,48,0.315,49,0.78,51,0.374,52,0.911,54,0.716,56,0.574,58,0.723,82,1.259,83,1.333,86,1.062,87,1.08,88,0.716,89,1.062,91,1.059,92,1.247,93,1.388,103,1.361,124,2.22,135,2.203,149,2.121,171,2.166,175,1.832,176,1.439,179,2.429,183,1.653,194,2.536,197,1.361,220,2.121,224,2.723,229,1.686,230,1.832,231,1.999,236,2.172,241,2.879,246,1.653,252,2.429,253,1.653,256,1.361,257,1.361,265,1.333,320,2.879,335,2.783,351,1.999,352,3.693,353,2.121,354,2.723,355,2.755,356,2.527,357,3.116,358,2.527,359,3.712,360,2.723,361,1.853,362,2.527,363,2.527,364,2.527,365,1.494,366,1.853,367,4.4,368,2.527,369,3.712,370,2.429,371,2.527,372,2.527,373,2.527,374,3.116,375,2.527,376,2.527,377,1.361,378,2.527,379,2.527,380,2.527,381,2.121,382,2.527,383,2.527,384,2.527,385,2.527,386,2.527,387,1.853,388,1.853,389,2.527,390,2.121,391,2.121,392,2.527,393,2.527,394,2.527]],["title/injectables/FindOneUserByEmailProvider.html",[48,0.275,355,1.604]],["body/injectables/FindOneUserByEmailProvider.html",[3,0.281,4,0.244,5,0.244,7,0.381,8,0.03,9,0.36,12,0.281,13,0.107,14,1.786,15,1.286,16,0.02,17,0.02,35,1.821,48,0.381,49,1.024,51,0.491,52,1.104,54,0.868,56,0.753,57,1.699,58,0.949,82,1.461,83,1.191,84,2.17,86,1.287,87,1.104,88,0.868,89,1.287,91,1.39,92,1.637,93,0.949,138,1.637,169,1.961,175,2.221,176,1.744,179,2.17,183,2.17,229,2.319,231,1.786,265,2.205,267,2.432,320,3.341,355,2.221,360,2.432,365,3.018,370,2.17,377,1.786,387,2.432,395,4.285,396,2.784,397,4.499,398,3.317,399,4.499,400,3.317,401,2.784,402,4.499,403,2.784,404,3.317,405,3.317]],["title/injectables/HashingProvider.html",[48,0.275,194,1.476]],["body/injectables/HashingProvider.html",[3,0.318,4,0.275,5,0.275,7,0.318,8,0.029,9,0.407,12,0.318,13,0.121,16,0.021,17,0.021,48,0.414,49,1.157,51,0.554,52,1.198,54,0.941,56,1.108,57,2.123,86,1.396,87,1.198,88,0.941,89,1.396,164,3.096,194,2.216,257,2.923,321,4.095,322,4.554,323,4.095,324,5.128,326,3.145,327,4.554,406,3.145,407,6.222,408,3.748,409,3.748]],["title/modules/PrismaModule.html",[18,1.003,32,1.476]],["body/modules/PrismaModule.html",[3,0.349,4,0.303,5,0.303,7,0.439,8,0.029,9,0.447,12,0.349,13,0.133,16,0.023,17,0.023,18,1.751,20,1.726,21,1.726,22,2.033,23,2.033,24,1.726,25,2.8,26,2.8,32,2.888,35,2.039,36,2.558,37,2.033,38,1.597,410,3.456,411,3.456,412,4.118,413,4.118,414,4.118]],["title/injectables/PrismaService.html",[35,1.003,48,0.275]],["body/injectables/PrismaService.html",[3,0.342,4,0.296,5,0.296,7,0.433,8,0.029,9,0.437,12,0.342,13,0.13,16,0.023,17,0.023,35,1.578,48,0.433,49,1.244,51,0.596,52,1.255,54,0.986,56,1.16,82,1.782,93,1.463,170,2.637,415,3.382,416,5.113,417,5.616,418,5.227,419,5.227,420,4.03,421,4.03,422,3.382,423,4.03,424,4.03]],["title/modules/RedisModule.html",[18,1.003,33,1.75]],["body/modules/RedisModule.html",[3,0.349,4,0.303,5,0.303,7,0.439,8,0.029,9,0.447,12,0.349,13,0.133,16,0.023,17,0.023,18,1.751,20,1.726,21,1.726,22,2.033,23,2.033,24,1.726,25,2.8,26,2.8,33,3.424,36,2.558,37,2.033,38,1.597,221,3.261,425,3.456,426,3.456,427,3.456,428,4.118,429,4.118]],["title/injectables/RedisService.html",[48,0.275,221,1.604]],["body/injectables/RedisService.html",[3,0.234,4,0.203,5,0.203,7,0.336,8,0.03,9,0.3,12,0.234,13,0.089,16,0.017,17,0.017,48,0.336,49,0.853,51,0.409,52,0.972,54,1.107,56,1.215,57,1.854,58,1.133,82,1.815,83,1.662,86,1.133,87,0.972,88,0.893,89,1.133,91,1.158,93,1.447,135,2.103,138,1.364,164,2.133,170,1.808,171,1.66,173,2.591,176,1.071,184,3.324,189,1.488,221,1.955,226,2.026,228,2.737,236,1.364,277,1.808,281,1.808,304,3.395,338,1.955,370,1.808,418,4.675,419,4.675,430,2.319,431,4.63,432,5.057,433,3.961,434,3.961,435,3.961,436,2.763,437,3.961,438,2.763,439,2.763,440,2.763,441,3.961,442,2.763,443,5.057,444,2.319,445,3.961,446,2.763,447,2.763,448,2.763,449,2.763,450,2.763,451,2.763,452,2.763,453,2.763,454,2.763,455,3.961,456,2.763,457,2.763,458,2.763,459,2.763,460,2.763,461,3.961,462,2.763]],["title/classes/RoleDto.html",[13,0.105,463,1.921]],["body/classes/RoleDto.html",[3,0.345,4,0.299,5,0.299,7,0.345,8,0.029,12,0.345,13,0.166,16,0.023,17,0.023,51,0.602,54,0.993,66,2.773,88,0.993,117,3.043,228,3.505,230,3.018,233,4.139,265,1.848,336,2.665,338,2.541,341,4.139,347,4.737,350,2.665,377,2.194,463,3.043,464,3.419,465,5.148,466,5.148,467,4.073,468,4.073]],["title/injectables/SeedService.html",[48,0.275,129,1.75]],["body/injectables/SeedService.html",[3,0.231,4,0.201,5,0.201,7,0.333,8,0.03,9,0.296,12,0.231,13,0.088,14,1.47,15,1.058,16,0.017,17,0.017,35,1.712,48,0.333,49,0.842,51,0.404,52,0.964,54,0.757,56,0.619,82,1.316,83,0.98,84,1.786,86,0.781,87,1.519,88,0.527,89,0.781,92,1.347,93,1.524,100,4.22,129,2.115,171,2.108,176,1.783,189,2.115,231,2.708,256,2.115,258,3.688,265,1.992,354,3.688,388,2.879,390,3.295,469,2.291,470,2.729,471,2.729,472,2.729,473,5.328,474,4.22,475,5.328,476,2.729,477,2.729,478,2.729,479,3.926,480,2.291,481,2.729,482,2.729,483,3.926,484,2.729,485,2.729,486,2.729,487,4.598,488,2.729,489,3.926,490,3.926,491,2.729,492,3.926,493,3.926,494,3.926,495,2.729,496,2.729]],["title/classes/SignInDto.html",[13,0.105,114,1.604]],["body/classes/SignInDto.html",[3,0.36,4,0.312,5,0.312,7,0.36,8,0.029,12,0.36,13,0.17,16,0.023,17,0.023,51,0.627,54,1.019,57,2.003,66,2.844,88,1.019,114,2.606,229,2.611,236,2.838,336,2.776,338,2.606,339,4.432,341,4.217,350,2.776,497,3.56,498,4.242,499,4.242,500,4.242,501,4.242,502,5.281]],["title/injectables/SignInProvider.html",[48,0.275,195,1.604]],["body/injectables/SignInProvider.html",[3,0.202,4,0.175,5,0.175,7,0.448,8,0.03,9,0.259,12,0.202,13,0.077,15,1.648,16,0.016,17,0.016,48,0.301,49,0.735,51,0.352,52,0.872,54,0.686,56,0.541,58,0.682,82,1.216,83,1.276,86,1.017,87,1.043,88,0.686,89,1.017,91,0.999,93,1.348,101,2.606,104,3.584,114,2.488,123,1.559,124,2.183,125,1.559,126,1.283,135,1.931,138,1.176,169,1.408,171,2.113,175,2.098,176,1.648,179,1.559,183,1.559,194,2.488,195,1.754,197,1.283,222,2.296,229,1.082,230,1.754,231,1.914,236,1.754,241,2.781,245,1.747,246,1.559,249,1.747,252,2.781,253,2.325,256,1.283,265,1.526,268,1.747,269,1.747,272,2.606,274,1.747,275,2.606,276,2.606,277,3.083,278,2.606,279,2.606,280,2.606,281,2.325,282,3.117,283,1.747,284,3.117,285,2.606,286,1.747,287,1.747,289,2.606,290,1.747,291,1.747,292,1.747,320,2.781,329,2,360,1.747,370,1.559,377,1.283,391,2,403,2,503,3.567,504,2,505,2.382,506,2.382,507,3.554,508,2.382,509,2.382,510,2.382,511,2.382,512,4.251,513,2.382,514,2.382,515,2.382,516,2.382,517,2.382,518,2.382,519,2.382,520,3.554]],["title/interfaces/Tokens.html",[250,1.921,251,2.126]],["body/interfaces/Tokens.html",[3,0.144,4,0.125,5,0.125,7,0.44,8,0.03,9,0.184,12,0.144,13,0.055,15,1.524,16,0.012,17,0.012,35,0.844,38,0.659,48,0.232,51,0.251,57,1.847,58,1.486,82,1.384,83,0.61,87,0.417,88,0.527,92,0.839,93,1.559,98,1.246,102,1.246,103,1.847,104,3.293,108,1.246,113,1.246,114,1.349,123,1.112,124,0.659,126,0.915,135,2.09,138,0.839,148,1.112,151,1.112,158,2.515,164,0.915,165,1.246,168,1.004,169,1.004,171,2.364,173,3.166,174,1.246,175,1.693,176,1.33,186,2.005,187,1.246,188,1.246,189,0.915,195,1.693,197,0.915,205,1.246,206,1.246,208,3.159,209,2.515,211,2.005,212,1.246,215,1.246,216,1.426,221,1.693,222,1.648,224,1.246,226,2.882,228,1.616,229,1.956,230,2.126,231,2.32,233,2.882,234,1.426,240,1.426,241,3.565,243,1.426,245,1.246,246,1.112,247,1.789,248,1.426,249,1.246,250,1.004,251,1.789,252,3.398,253,1.112,254,1.426,255,1.426,256,1.472,257,0.915,258,2.005,259,2.294,260,1.426,261,1.426,262,2.005,263,1.426,264,2.294,265,1.232,266,1.426,267,1.246,268,1.246,269,1.246,270,2.878,271,1.426,272,2.005,273,1.426,274,1.246,275,2.005,276,2.005,277,2.244,278,2.005,279,2.005,280,2.005,281,2.244,282,2.515,283,1.246,284,2.515,285,2.005,286,1.246,287,1.246,288,2.294,289,1.246,290,1.246,291,1.246,292,1.246,293,1.426,294,1.426,295,1.426,296,2.294,297,2.294,298,2.294,299,2.294,300,1.426,301,1.426,302,1.426,303,1.426,304,2.005,305,1.426,306,1.426,307,1.426,308,1.426,309,1.426,310,1.426,311,1.426,312,1.426,313,1.426,314,2.294,315,1.426,316,1.426,317,1.426,318,1.426,338,1.349,521,1.699]],["title/controllers/UserController.html",[0,1.362,522,2.126]],["body/controllers/UserController.html",[0,1.309,2,1.309,3,0.265,4,0.23,5,0.23,7,0.491,8,0.03,9,0.339,12,0.265,13,0.101,14,1.682,16,0.019,17,0.019,51,0.462,52,1.06,54,0.955,56,1.123,58,1.416,63,2.291,66,2.665,70,2.291,71,2.044,82,1.759,86,1.416,87,1.215,88,0.955,89,1.416,91,2.074,93,0.894,103,2.326,117,2.553,118,2.621,119,2.621,120,2.621,122,2.621,127,1.846,142,2.621,222,2.074,265,1.122,335,3.121,354,3.167,357,2.621,361,2.291,463,3.156,522,2.825,523,2.621,524,3.624,525,3.624,526,2.621,527,3.123,528,3.123,529,3.123,530,3.123,531,3.123,532,3.123,533,3.123,534,2.621,535,2.621,536,3.123,537,3.123,538,3.123,539,3.123,540,3.123,541,3.123,542,3.123,543,3.123,544,3.123,545,3.123,546,3.123,547,3.123]],["title/modules/UserModule.html",[18,1.003,34,1.75]],["body/modules/UserModule.html",[2,1.864,3,0.276,4,0.24,5,0.24,7,0.509,8,0.029,9,0.354,12,0.276,13,0.105,16,0.02,17,0.02,18,1.562,20,1.366,21,1.366,22,1.609,23,1.609,24,1.366,25,2.497,26,2.497,31,2.395,32,2.667,34,3.481,36,2.194,37,1.609,38,1.264,40,2.909,80,2.39,197,2.395,222,2.676,265,1.17,351,3.438,355,2.898,365,1.927,366,2.39,522,3.311,535,2.735,548,2.735,549,2.735,550,3.259,551,2.735,552,3.259,553,3.259,554,3.259,555,2.735,556,2.735,557,2.735]],["title/injectables/UserService.html",[48,0.275,222,1.362]],["body/injectables/UserService.html",[3,0.196,4,0.17,5,0.17,7,0.443,8,0.03,9,0.251,12,0.196,13,0.074,15,1.619,16,0.015,17,0.015,35,1.614,48,0.295,49,0.714,51,0.342,52,0.854,54,0.96,56,1.054,57,1.39,58,1.329,82,1.712,83,1.249,84,1.514,86,1.425,87,1.222,88,0.896,89,1.425,91,1.947,92,1.142,93,1.329,117,1.368,135,1.897,148,1.514,151,1.514,171,1.751,175,1.142,176,1.619,222,1.458,229,1.579,230,1.716,256,2.25,257,1.246,262,1.697,265,2.088,335,2.682,351,2.922,355,2.678,361,1.697,365,1.368,366,1.697,387,3.063,388,1.697,401,1.942,463,2.746,474,2.918,524,2.918,525,3.898,526,2.918,534,1.942,555,1.942,556,1.942,557,1.942,558,1.942,559,3.477,560,3.477,561,2.314,562,2.314,563,3.477,564,3.477,565,2.314,566,3.477,567,3.477,568,2.314,569,3.477,570,2.314,571,2.314,572,2.314,573,2.314,574,2.314,575,2.314,576,2.314,577,2.314,578,2.314,579,2.314,580,2.314,581,2.314,582,2.314,583,2.314,584,2.314,585,2.314,586,2.314,587,2.314]],["title/coverage.html",[588,3.254]],["body/coverage.html",[0,2.22,1,2.005,5,0.225,6,2.571,8,0.029,10,1.65,13,0.158,16,0.019,17,0.019,24,1.284,35,0.946,48,0.535,50,2.571,61,2.005,62,2.571,68,1.65,81,2.571,88,0.591,95,2.005,96,2.571,114,1.512,124,1.188,127,1.811,129,1.65,131,2.247,152,2.247,154,2.571,176,1.188,194,1.392,195,1.512,202,2.005,215,3.125,221,1.512,222,1.284,250,1.811,251,2.005,265,1.1,319,2.571,335,1.65,337,2.571,351,1.65,352,2.571,353,2.571,355,1.512,365,1.811,395,2.571,396,2.571,406,2.571,415,2.571,430,2.571,463,1.811,464,2.571,469,2.571,497,2.571,503,2.571,504,2.571,522,2.005,523,2.571,558,2.571,588,2.247,589,2.571,590,3.064,591,3.064,592,6.589,593,6.197,594,4.898,595,4.261,596,4.261,597,3.064,598,4.261,599,2.571,600,4.261,601,2.571,602,3.064,603,3.064,604,3.064,605,3.064,606,3.064,607,3.064,608,3.064]],["title/dependencies.html",[21,1.639,609,2.277]],["body/dependencies.html",[8,0.03,9,0.459,13,0.17,16,0.023,17,0.023,21,1.772,71,2.765,126,2.276,168,2.499,247,2.765,350,2.765,422,3.547,444,3.547,610,4.226,611,4.226,612,5.268,613,4.226,614,4.226,615,4.226,616,4.226,617,4.226,618,4.226,619,4.226,620,4.226,621,4.226,622,4.226,623,4.226,624,4.226,625,4.226,626,4.226,627,4.226,628,4.226,629,4.226,630,4.226,631,4.226,632,4.226,633,4.226]],["title/miscellaneous/functions.html",[634,2.277,635,3.281]],["body/miscellaneous/functions.html",[8,0.027,16,0.025,17,0.025,24,2.522,51,0.696,56,1.068,57,1.872,86,1.346,87,1.155,88,1.085,89,1.346,131,4.124,599,3.948,601,3.948,634,3.948,635,3.948,636,4.704,637,4.704,638,4.704,639,4.704]],["title/index.html",[51,0.401,640,2.713,641,2.277]],["body/index.html",[4,0.18,8,0.028,16,0.016,17,0.016,38,2.071,374,3.045,377,1.32,381,4.483,480,2.056,588,1.797,589,3.045,641,2.056,642,2.45,643,2.45,644,2.45,645,2.45,646,2.45,647,4.321,648,3.628,649,2.45,650,2.45,651,2.45,652,2.45,653,3.628,654,4.321,655,2.45,656,2.45,657,2.45,658,4.778,659,2.45,660,4.778,661,5.676,662,2.45,663,5.528,664,2.45,665,2.45,666,2.45,667,3.628,668,2.45,669,3.628,670,2.45,671,4.321,672,2.45,673,3.628,674,2.45,675,2.45,676,2.45,677,2.45,678,2.45,679,4.778,680,5.676,681,5.341,682,2.45,683,3.628,684,2.45,685,2.45,686,2.45,687,2.45,688,2.45,689,3.628,690,4.778,691,2.45,692,3.628,693,2.45,694,2.45,695,3.628,696,5.101,697,4.778,698,2.45,699,3.628,700,2.45,701,2.45,702,2.45,703,2.45,704,4.778,705,2.45,706,2.45,707,2.45,708,2.45,709,2.45,710,3.628,711,2.45,712,2.45,713,2.45,714,2.45,715,2.45,716,3.628,717,2.45,718,2.45,719,2.45,720,3.628,721,2.45,722,2.45,723,4.01,724,2.45,725,2.45,726,2.45,727,2.45,728,2.45,729,2.45,730,2.45,731,2.45,732,3.628,733,2.45,734,2.45,735,2.45,736,2.45,737,4.321,738,2.45,739,2.45,740,2.45,741,2.45,742,2.45,743,2.45,744,3.628,745,2.45,746,2.45,747,2.45,748,2.45,749,2.45,750,3.628,751,2.45,752,2.45,753,2.45,754,3.628,755,3.628,756,2.45,757,2.45,758,2.45,759,2.45,760,2.45,761,2.45,762,2.45,763,2.45,764,2.45,765,2.45,766,2.056,767,2.45,768,2.45,769,2.45,770,2.45,771,2.45,772,2.45,773,2.056]],["title/modules.html",[20,1.86]],["body/modules.html",[8,0.024,16,0.024,17,0.024,19,2.99,20,1.916,30,2.702,31,2.461,32,2.076,33,2.461,34,2.461,723,5.392,774,6.424,775,6.424,776,6.424]],["title/overview.html",[777,3.724]],["body/overview.html",[2,1.17,8,0.029,10,2.507,16,0.018,17,0.018,18,0.861,19,4.181,20,1.17,21,1.17,22,1.377,23,1.377,24,1.17,25,1.377,26,1.377,27,2.342,28,2.342,29,2.342,30,3.402,31,3.422,32,2.72,33,3.099,34,3.375,35,1.816,36,1.969,37,1.377,38,1.082,49,0.861,68,2.507,75,2.342,77,2.342,124,2.231,129,2.507,152,2.046,189,2.148,190,2.342,192,2.342,193,2.342,194,2.307,195,2.298,221,2.84,222,2.412,250,1.649,336,1.826,351,3.099,355,2.298,410,2.342,411,2.342,425,2.342,426,2.342,427,2.342,548,2.342,549,2.342,551,2.342,777,2.342,778,2.79,779,2.79,780,2.79,781,2.79]],["title/properties.html",[338,1.93,609,2.277]],["body/properties.html",[8,0.029,16,0.026,17,0.026,338,2.455,377,2.679,766,4.174,773,4.174,782,4.974,783,4.974,784,4.974]],["title/routes.html",[785,3.724]],["body/routes.html",[8,0.026,16,0.026,17,0.026,785,4.368]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArchivesController.html":{},"modules/ArchivesModule.html":{},"injectables/ArchivesService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"classes/RoleDto.html":{},"injectables/SeedService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["0",{"_index":592,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":783,"title":{},"body":{"properties.html":{}}}],["0.14.2",{"_index":622,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":629,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":621,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":594,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":597,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":595,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":593,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":598,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":596,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":602,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":189,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/RedisService.html":{},"injectables/SeedService.html":{},"interfaces/Tokens.html":{},"overview.html":{}}}],["1.1.23",{"_index":611,"title":{},"body":{"dependencies.html":{}}}],["1.22.22",{"_index":633,"title":{},"body":{"dependencies.html":{}}}],["1.4.7",{"_index":625,"title":{},"body":{"dependencies.html":{}}}],["1/3",{"_index":604,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["1000",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RedisService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{}}}],["11.0.0",{"_index":614,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":616,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":612,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":617,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":780,"title":{},"body":{"overview.html":{}}}],["15",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{}}}],["24",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{}}}],["3",{"_index":781,"title":{},"body":{"overview.html":{}}}],["3/6",{"_index":606,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":603,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":779,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":619,"title":{},"body":{"dependencies.html":{}}}],["5.6.1",{"_index":626,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":605,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":778,"title":{},"body":{"overview.html":{}}}],["6.7.0",{"_index":618,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{}}}],["6379",{"_index":449,"title":{},"body":{"injectables/RedisService.html":{}}}],["7.8.2",{"_index":631,"title":{},"body":{"dependencies.html":{}}}],["abstract",{"_index":407,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["access_token",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{}}}],["admin",{"_index":390,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/SeedService.html":{}}}],["adminpermissions",{"_index":488,"title":{},"body":{"injectables/SeedService.html":{}}}],["adminpermissions.map((perm",{"_index":491,"title":{},"body":{"injectables/SeedService.html":{}}}],["again",{"_index":375,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["allowing",{"_index":711,"title":{},"body":{"index.html":{}}}],["already",{"_index":379,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["amazing",{"_index":760,"title":{},"body":{"index.html":{}}}],["apitags",{"_index":70,"title":{},"body":{"controllers/ArchivesController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["apitags(\"archives",{"_index":73,"title":{},"body":{"controllers/ArchivesController.html":{}}}],["apitags(\"auth",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags(\"user",{"_index":538,"title":{},"body":{"controllers/UserController.html":{}}}],["app.controller",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":681,"title":{},"body":{"index.html":{}}}],["applications",{"_index":653,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["archive",{"_index":643,"title":{},"body":{"index.html":{}}}],["archives",{"_index":64,"title":{},"body":{"controllers/ArchivesController.html":{}}}],["archives.controller",{"_index":79,"title":{},"body":{"modules/ArchivesModule.html":{}}}],["archives.service",{"_index":69,"title":{},"body":{"controllers/ArchivesController.html":{},"modules/ArchivesModule.html":{}}}],["archives/archives.module",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["archivescontroller",{"_index":61,"title":{"controllers/ArchivesController.html":{}},"body":{"controllers/ArchivesController.html":{},"modules/ArchivesModule.html":{},"coverage.html":{}}}],["archivesmodule",{"_index":30,"title":{"modules/ArchivesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules.html":{},"overview.html":{}}}],["archivesservice",{"_index":68,"title":{"injectables/ArchivesService.html":{}},"body":{"controllers/ArchivesController.html":{},"modules/ArchivesModule.html":{},"injectables/ArchivesService.html":{},"coverage.html":{},"overview.html":{}}}],["arg",{"_index":571,"title":{},"body":{"injectables/UserService.html":{}}}],["arg.email",{"_index":585,"title":{},"body":{"injectables/UserService.html":{}}}],["assign",{"_index":563,"title":{},"body":{"injectables/UserService.html":{}}}],["assigned",{"_index":584,"title":{},"body":{"injectables/UserService.html":{}}}],["assigning",{"_index":465,"title":{},"body":{"classes/RoleDto.html":{}}}],["assignrole",{"_index":524,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["assignrole(@body",{"_index":543,"title":{},"body":{"controllers/UserController.html":{}}}],["assignrole(dto",{"_index":526,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["async",{"_index":82,"title":{},"body":{"injectables/ArchivesService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/SeedService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/SignInProvider.html":{}}}],["auth/auth.module",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":95,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":127,"title":{"guards/AuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["authheader",{"_index":186,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["authheader.split",{"_index":188,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["authheader.startswith(\"bearer",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["authmodule",{"_index":31,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":766,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":124,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":93,"title":{},"body":{"injectables/ArchivesService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/SeedService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["aws",{"_index":699,"title":{},"body":{"index.html":{}}}],["backers",{"_index":761,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":359,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["based",{"_index":694,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"interfaces/Tokens.html":{},"dependencies.html":{}}}],["bcrypt.compare(data",{"_index":334,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.gensalt(10",{"_index":332,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(data",{"_index":333,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(password",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["bcryptprovider",{"_index":202,"title":{"injectables/BcryptProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["bearer",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["blacklisted",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["board",{"_index":753,"title":{},"body":{"index.html":{}}}],["body",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":513,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["branch",{"_index":644,"title":{},"body":{"index.html":{}}}],["browse",{"_index":776,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":774,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":324,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["building",{"_index":648,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":155,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivate(context",{"_index":160,"title":{},"body":{"guards/AuthGuard.html":{}}}],["catch",{"_index":183,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/SignInProvider.html":{}}}],["channel",{"_index":725,"title":{},"body":{"index.html":{}}}],["check",{"_index":381,"title":{},"body":{"injectables/CreateUserProvider.html":{},"index.html":{}}}],["class",{"_index":13,"title":{"classes/CreateUserDto.html":{},"classes/RoleDto.html":{},"classes/SignInDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArchivesController.html":{},"modules/ArchivesModule.html":{},"injectables/ArchivesService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"classes/RoleDto.html":{},"injectables/SeedService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":336,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RoleDto.html":{},"classes/SignInDto.html":{},"overview.html":{}}}],["clicks",{"_index":710,"title":{},"body":{"index.html":{}}}],["client",{"_index":431,"title":{},"body":{"injectables/RedisService.html":{}}}],["cloud",{"_index":693,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_archivesmodule",{"_index":75,"title":{},"body":{"modules/ArchivesModule.html":{},"overview.html":{}}}],["cluster_archivesmodule_imports",{"_index":76,"title":{},"body":{"modules/ArchivesModule.html":{}}}],["cluster_archivesmodule_providers",{"_index":77,"title":{},"body":{"modules/ArchivesModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":190,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":192,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":193,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":410,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":411,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":412,"title":{},"body":{"modules/PrismaModule.html":{}}}],["cluster_redismodule",{"_index":425,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["cluster_redismodule_exports",{"_index":426,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["cluster_redismodule_providers",{"_index":427,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":548,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":551,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":550,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":549,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["come",{"_index":717,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":610,"title":{},"body":{"dependencies.html":{}}}],["connect",{"_index":388,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/SeedService.html":{},"injectables/UserService.html":{}}}],["connecting",{"_index":378,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["console.log(\"redis",{"_index":452,"title":{},"body":{"injectables/RedisService.html":{}}}],["const",{"_index":171,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/RedisService.html":{},"injectables/SeedService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":83,"title":{},"body":{"injectables/ArchivesService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/RedisService.html":{},"injectables/SeedService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"injectables/UserService.html":{}}}],["constructor(jwtservice",{"_index":157,"title":{},"body":{"guards/AuthGuard.html":{}}}],["constructor(prisma",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{}}}],["constructor(prismaservice",{"_index":84,"title":{},"body":{"injectables/ArchivesService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/SeedService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArchivesController.html":{},"injectables/ArchivesService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/SeedService.html":{},"controllers/UserController.html":{}}}],["constructor(userservice",{"_index":505,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["context",{"_index":163,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":172,"title":{},"body":{"guards/AuthGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/ArchivesController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/ArchivesController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller(\"archives",{"_index":72,"title":{},"body":{"controllers/ArchivesController.html":{}}}],["controller(\"auth",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller(\"user",{"_index":537,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/ArchivesController.html":{},"modules/ArchivesModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["cookie",{"_index":623,"title":{},"body":{"dependencies.html":{}}}],["courses",{"_index":731,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":588,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["creat:users",{"_index":472,"title":{},"body":{"injectables/SeedService.html":{}}}],["create",{"_index":354,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/SeedService.html":{},"controllers/UserController.html":{}}}],["create(@body",{"_index":540,"title":{},"body":{"controllers/UserController.html":{}}}],["create(createuserdto",{"_index":357,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UserController.html":{}}}],["created_at",{"_index":494,"title":{},"body":{"injectables/SeedService.html":{}}}],["createdat",{"_index":486,"title":{},"body":{"injectables/SeedService.html":{}}}],["createdby",{"_index":493,"title":{},"body":{"injectables/SeedService.html":{}}}],["createuser",{"_index":559,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(createuserdto",{"_index":564,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto",{"_index":335,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":369,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["createuserdto.name",{"_index":386,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["createuserdto.password",{"_index":383,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["createuserprovider",{"_index":351,"title":{"injectables/CreateUserProvider.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["credentials",{"_index":511,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["data",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"interfaces/Tokens.html":{},"injectables/UserService.html":{}}}],["database",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CreateUserProvider.html":{}}}],["date",{"_index":487,"title":{},"body":{"injectables/SeedService.html":{}}}],["date.now",{"_index":458,"title":{},"body":{"injectables/RedisService.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decode",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["decode.exp",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["decorators",{"_index":66,"title":{},"body":{"controllers/ArchivesController.html":{},"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/RoleDto.html":{},"classes/SignInDto.html":{},"controllers/UserController.html":{}}}],["deeper",{"_index":727,"title":{},"body":{"index.html":{}}}],["defined",{"_index":54,"title":{},"body":{"injectables/AppService.html":{},"controllers/ArchivesController.html":{},"injectables/ArchivesService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"classes/RoleDto.html":{},"injectables/SeedService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":478,"title":{},"body":{"injectables/SeedService.html":{}}}],["delete:users",{"_index":477,"title":{},"body":{"injectables/SeedService.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":679,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":698,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":689,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":709,"title":{},"body":{"index.html":{}}}],["description",{"_index":377,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/RoleDto.html":{},"injectables/SignInProvider.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":664,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":739,"title":{},"body":{"index.html":{}}}],["discord",{"_index":724,"title":{},"body":{"index.html":{}}}],["dive",{"_index":726,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":589,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dto",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RoleDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto.role",{"_index":579,"title":{},"body":{"injectables/UserService.html":{}}}],["dto.userid",{"_index":581,"title":{},"body":{"injectables/UserService.html":{}}}],["dto/createuserdto.dot",{"_index":361,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/roledto.dto",{"_index":534,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/signindto.dto",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{}}}],["e2e",{"_index":674,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":649,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":687,"title":{},"body":{"index.html":{}}}],["email",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"injectables/UserService.html":{}}}],["email.provider",{"_index":366,"title":{},"body":{"injectables/CreateUserProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["email.provider.ts",{"_index":396,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"coverage.html":{}}}],["email.provider.ts:12",{"_index":400,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["email.provider.ts:9",{"_index":398,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["ensure",{"_index":685,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":743,"title":{},"body":{"index.html":{}}}],["err",{"_index":184,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/RedisService.html":{}}}],["error",{"_index":370,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/RedisService.html":{},"injectables/SignInProvider.html":{}}}],["ex",{"_index":460,"title":{},"body":{"injectables/RedisService.html":{}}}],["example",{"_index":660,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":161,"title":{},"body":{"guards/AuthGuard.html":{}}}],["exist",{"_index":405,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["existinguser",{"_index":367,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["exists",{"_index":380,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["experience",{"_index":729,"title":{},"body":{"index.html":{}}}],["expiresat",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RedisService.html":{},"interfaces/Tokens.html":{}}}],["expiresin",{"_index":211,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArchivesController.html":{},"modules/ArchivesModule.html":{},"injectables/ArchivesService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"classes/RoleDto.html":{},"injectables/SeedService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"dependencies.html":{}}}],["extends",{"_index":416,"title":{},"body":{"injectables/PrismaService.html":{}}}],["extract",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["extracttokenfromheader",{"_index":156,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["extracttokenfromheader(request",{"_index":165,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["false",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RedisService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{}}}],["fast",{"_index":702,"title":{},"body":{"index.html":{}}}],["features",{"_index":713,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":404,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["few",{"_index":704,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArchivesController.html":{},"modules/ArchivesModule.html":{},"injectables/ArchivesService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"classes/RoleDto.html":{},"injectables/SeedService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["filtereduser",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["find",{"_index":364,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["findonebyemail",{"_index":560,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyemail(email",{"_index":567,"title":{},"body":{"injectables/UserService.html":{}}}],["findoneuserbyemail",{"_index":397,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["findoneuserbyemail(email",{"_index":399,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["findoneuserbyemailprovider",{"_index":355,"title":{"injectables/FindOneUserByEmailProvider.html":{}},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["focus",{"_index":712,"title":{},"body":{"index.html":{}}}],["follow",{"_index":747,"title":{},"body":{"index.html":{}}}],["forbiddenexception",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{}}}],["forbiddenexception(\"invalid",{"_index":510,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["forwardref",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"modules/UserModule.html":{}}}],["found",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":647,"title":{},"body":{"index.html":{}}}],["full",{"_index":742,"title":{},"body":{"index.html":{}}}],["function",{"_index":600,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":635,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":707,"title":{},"body":{"index.html":{}}}],["generate",{"_index":330,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["get(\"logout",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(\"profile",{"_index":545,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"refresh_token",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('refresh_token",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["getall",{"_index":65,"title":{},"body":{"controllers/ArchivesController.html":{},"injectables/ArchivesService.html":{}}}],["getclient",{"_index":432,"title":{},"body":{"injectables/RedisService.html":{}}}],["gethello",{"_index":53,"title":{},"body":{"injectables/AppService.html":{}}}],["getting",{"_index":640,"title":{"index.html":{}},"body":{}}],["gettokens",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["gettokens(userid",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["graph",{"_index":734,"title":{},"body":{"index.html":{}}}],["group_name",{"_index":473,"title":{},"body":{"injectables/SeedService.html":{}}}],["grow",{"_index":757,"title":{},"body":{"index.html":{}}}],["guard",{"_index":152,"title":{"guards/AuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guard/auth.guard",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards",{"_index":153,"title":{},"body":{"guards/AuthGuard.html":{}}}],["handle",{"_index":574,"title":{},"body":{"injectables/UserService.html":{}}}],["hands",{"_index":728,"title":{},"body":{"index.html":{}}}],["handy",{"_index":718,"title":{},"body":{"index.html":{}}}],["hash",{"_index":327,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashedpassword",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashedpassword(password",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["hashing.provider",{"_index":329,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/SignInProvider.html":{}}}],["hashingprovider",{"_index":194,"title":{"injectables/HashingProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["hashpassword",{"_index":321,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashpassword(data",{"_index":323,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hello",{"_index":59,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":732,"title":{},"body":{"index.html":{}}}],["here",{"_index":764,"title":{},"body":{"index.html":{}}}],["host",{"_index":446,"title":{},"body":{"injectables/RedisService.html":{}}}],["httponly",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{}}}],["https://nestjs.com",{"_index":770,"title":{},"body":{"index.html":{}}}],["id",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/SeedService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":590,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":170,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArchivesController.html":{},"modules/ArchivesModule.html":{},"injectables/ArchivesService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"classes/RoleDto.html":{},"injectables/SeedService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["in.provider",{"_index":206,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["in.provider.ts",{"_index":504,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["in.provider.ts:16",{"_index":506,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["in.provider.ts:25",{"_index":508,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["include",{"_index":402,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["index",{"_index":51,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"controllers/ArchivesController.html":{},"injectables/ArchivesService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"classes/RoleDto.html":{},"injectables/SeedService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArchivesController.html":{},"modules/ArchivesModule.html":{},"injectables/ArchivesService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"classes/RoleDto.html":{},"injectables/SeedService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["information",{"_index":691,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":715,"title":{},"body":{"index.html":{}}}],["inject",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{}}}],["inject(forwardref",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{}}}],["injectable",{"_index":48,"title":{"injectables/AppService.html":{},"injectables/ArchivesService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/SeedService.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/ArchivesService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/SeedService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":49,"title":{},"body":{"injectables/AppService.html":{},"injectables/ArchivesService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/SeedService.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["install",{"_index":706,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":662,"title":{},"body":{"index.html":{}}}],["interact",{"_index":735,"title":{},"body":{"index.html":{}}}],["interface",{"_index":250,"title":{"interfaces/Tokens.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":521,"title":{},"body":{"interfaces/Tokens.html":{}}}],["ioredis",{"_index":444,"title":{},"body":{"injectables/RedisService.html":{},"dependencies.html":{}}}],["isblacklisted",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["isemail",{"_index":339,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isemail()@isnotempty",{"_index":498,"title":{},"body":{"classes/SignInDto.html":{}}}],["isequal",{"_index":512,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["isnotempty",{"_index":341,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RoleDto.html":{},"classes/SignInDto.html":{}}}],["isnotempty()@isnumber",{"_index":345,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isstring",{"_index":500,"title":{},"body":{"classes/SignInDto.html":{}}}],["isnumber",{"_index":347,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RoleDto.html":{}}}],["isnumber()@isnotempty",{"_index":466,"title":{},"body":{"classes/RoleDto.html":{}}}],["isstring",{"_index":502,"title":{},"body":{"classes/SignInDto.html":{}}}],["istokenblacklisted",{"_index":433,"title":{},"body":{"injectables/RedisService.html":{}}}],["istokenblacklisted(token",{"_index":437,"title":{},"body":{"injectables/RedisService.html":{}}}],["job",{"_index":750,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":752,"title":{},"body":{"index.html":{}}}],["join",{"_index":763,"title":{},"body":{"index.html":{}}}],["jwtmodule",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":207,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":158,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["kam",{"_index":450,"title":{},"body":{"injectables/RedisService.html":{}}}],["kamil",{"_index":767,"title":{},"body":{"index.html":{}}}],["key",{"_index":682,"title":{},"body":{"index.html":{}}}],["label",{"_index":475,"title":{},"body":{"injectables/SeedService.html":{}}}],["later",{"_index":376,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["learn",{"_index":721,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["license",{"_index":773,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":755,"title":{},"body":{"index.html":{}}}],["linkedin",{"_index":749,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":447,"title":{},"body":{"injectables/RedisService.html":{}}}],["logged",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["logout",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["logout(request",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["looking",{"_index":692,"title":{},"body":{"index.html":{}}}],["loop",{"_index":745,"title":{},"body":{"index.html":{}}}],["makes",{"_index":700,"title":{},"body":{"index.html":{}}}],["managing",{"_index":714,"title":{},"body":{"index.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArchivesController.html":{},"modules/ArchivesModule.html":{},"injectables/ArchivesService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"classes/RoleDto.html":{},"injectables/SeedService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["math.floor((expiresat",{"_index":457,"title":{},"body":{"injectables/RedisService.html":{}}}],["math.max(0",{"_index":456,"title":{},"body":{"injectables/RedisService.html":{}}}],["mau",{"_index":696,"title":{},"body":{"index.html":{}}}],["maxage",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{}}}],["message",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/Tokens.html":{},"injectables/UserService.html":{}}}],["metadata",{"_index":628,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":52,"title":{},"body":{"injectables/AppService.html":{},"controllers/ArchivesController.html":{},"injectables/ArchivesService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/SeedService.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["min",{"_index":348,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":349,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(6",{"_index":343,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minutes",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{}}}],["miscellaneous",{"_index":634,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["mit",{"_index":754,"title":{},"body":{"index.html":{}}}],["mode",{"_index":667,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":373,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["more",{"_index":690,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":768,"title":{},"body":{"index.html":{}}}],["name",{"_index":87,"title":{},"body":{"injectables/ArchivesService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/RedisService.html":{},"injectables/SeedService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":740,"title":{},"body":{"index.html":{}}}],["nest",{"_index":654,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":772,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":680,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArchivesController.html":{},"modules/ArchivesModule.html":{},"injectables/ArchivesService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/SeedService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":613,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":168,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Tokens.html":{},"dependencies.html":{}}}],["nestjs/mau",{"_index":708,"title":{},"body":{"index.html":{}}}],["nestjs/platform",{"_index":615,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":71,"title":{},"body":{"controllers/ArchivesController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["new",{"_index":176,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/RedisService.html":{},"injectables/SeedService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["new_refresh_token",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["newuser",{"_index":384,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["newuser.email",{"_index":393,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["newuser.id",{"_index":392,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["node.js",{"_index":646,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":572,"title":{},"body":{"injectables/UserService.html":{}}}],["notfoundexception(\"user",{"_index":586,"title":{},"body":{"injectables/UserService.html":{}}}],["npm",{"_index":661,"title":{},"body":{"index.html":{}}}],["null",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RedisService.html":{},"interfaces/Tokens.html":{}}}],["number",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/RedisService.html":{},"classes/RoleDto.html":{},"interfaces/Tokens.html":{}}}],["number(createuserdto.role",{"_index":389,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["offer",{"_index":751,"title":{},"body":{"index.html":{}}}],["office",{"_index":642,"title":{},"body":{"index.html":{}}}],["official",{"_index":697,"title":{},"body":{"index.html":{}}}],["one",{"_index":365,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["onmoduledestroy",{"_index":418,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/RedisService.html":{}}}],["onmoduleinit",{"_index":419,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/RedisService.html":{}}}],["open",{"_index":756,"title":{},"body":{"index.html":{}}}],["operations",{"_index":576,"title":{},"body":{"injectables/UserService.html":{}}}],["optional",{"_index":89,"title":{},"body":{"injectables/ArchivesService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/RedisService.html":{},"injectables/SeedService.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"interfaces/Tokens.html":{},"modules/UserModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":777,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":609,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":86,"title":{},"body":{"injectables/ArchivesService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/RedisService.html":{},"injectables/SeedService.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["parser",{"_index":624,"title":{},"body":{"dependencies.html":{}}}],["part",{"_index":741,"title":{},"body":{"index.html":{}}}],["passthrough",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["password",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/RedisService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{}}}],["path",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{}}}],["payload",{"_index":180,"title":{},"body":{"guards/AuthGuard.html":{}}}],["perm",{"_index":481,"title":{},"body":{"injectables/SeedService.html":{}}}],["perm.group_name",{"_index":484,"title":{},"body":{"injectables/SeedService.html":{}}}],["perm.id",{"_index":492,"title":{},"body":{"injectables/SeedService.html":{}}}],["perm.label",{"_index":485,"title":{},"body":{"injectables/SeedService.html":{}}}],["perm.name",{"_index":483,"title":{},"body":{"injectables/SeedService.html":{}}}],["permission",{"_index":639,"title":{},"body":{"miscellaneous/functions.html":{}}}],["permission.name",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["permissions",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/SeedService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{}}}],["permissions.map((permission",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["permissionsguard",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["permissionsguard(\"read:users",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["permissionsguard(permission",{"_index":638,"title":{},"body":{"miscellaneous/functions.html":{}}}],["platform",{"_index":695,"title":{},"body":{"index.html":{}}}],["please",{"_index":374,"title":{},"body":{"injectables/CreateUserProvider.html":{},"index.html":{}}}],["port",{"_index":448,"title":{},"body":{"injectables/RedisService.html":{}}}],["possible",{"_index":688,"title":{},"body":{"index.html":{}}}],["post",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["post(\"assign_role",{"_index":542,"title":{},"body":{"controllers/UserController.html":{}}}],["post(\"create",{"_index":539,"title":{},"body":{"controllers/UserController.html":{}}}],["post(\"seed",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"sign",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('assign_role",{"_index":527,"title":{},"body":{"controllers/UserController.html":{}}}],["post('create",{"_index":529,"title":{},"body":{"controllers/UserController.html":{}}}],["post('seed",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('sign",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":63,"title":{},"body":{"controllers/ArchivesController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["prisma",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"interfaces/Tokens.html":{}}}],["prisma.service",{"_index":414,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/client",{"_index":422,"title":{},"body":{"injectables/PrismaService.html":{},"dependencies.html":{}}}],["prisma/prisma.module",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["prisma/prisma.service",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["prisma/seed.service",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["prisma/seed.service.ts",{"_index":469,"title":{},"body":{"injectables/SeedService.html":{},"coverage.html":{}}}],["prisma/seed.service.ts:5",{"_index":470,"title":{},"body":{"injectables/SeedService.html":{}}}],["prisma/seed.service.ts:8",{"_index":471,"title":{},"body":{"injectables/SeedService.html":{}}}],["prismaclient",{"_index":417,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":32,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":35,"title":{"injectables/PrismaService.html":{}},"body":{"modules/AppModule.html":{},"injectables/ArchivesService.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/SeedService.html":{},"interfaces/Tokens.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/RedisService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"injectables/UserService.html":{}}}],["process",{"_index":372,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["process.env.access_token_expired_time",{"_index":212,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["process.env.access_token_key",{"_index":209,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["process.env.refresh_token_expired_time",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["process.env.refresh_token_key",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["production",{"_index":669,"title":{},"body":{"index.html":{}}}],["profile",{"_index":525,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["profile(@req",{"_index":546,"title":{},"body":{"controllers/UserController.html":{}}}],["profile(arg",{"_index":569,"title":{},"body":{"injectables/UserService.html":{}}}],["profile(request",{"_index":531,"title":{},"body":{"controllers/UserController.html":{}}}],["profile_picture",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{}}}],["progressive",{"_index":645,"title":{},"body":{"index.html":{}}}],["project",{"_index":658,"title":{},"body":{"index.html":{}}}],["promise",{"_index":164,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"injectables/RedisService.html":{},"interfaces/Tokens.html":{}}}],["promise.all",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["properties",{"_index":338,"title":{"properties.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/RedisService.html":{},"classes/RoleDto.html":{},"classes/SignInDto.html":{},"interfaces/Tokens.html":{},"properties.html":{}}}],["provide",{"_index":213,"title":{},"body":{"modules/AuthModule.html":{}}}],["provided",{"_index":178,"title":{},"body":{"guards/AuthGuard.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["providers/bcrypt.provider",{"_index":203,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/create",{"_index":556,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["providers/find",{"_index":555,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["providers/hashing.provider",{"_index":201,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/sign",{"_index":205,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["public",{"_index":320,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/SignInProvider.html":{}}}],["questions",{"_index":722,"title":{},"body":{"index.html":{}}}],["read",{"_index":480,"title":{},"body":{"injectables/SeedService.html":{},"index.html":{}}}],["read:users",{"_index":479,"title":{},"body":{"injectables/SeedService.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/ArchivesService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/SeedService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"injectables/UserService.html":{}}}],["ready",{"_index":678,"title":{},"body":{"index.html":{}}}],["real",{"_index":736,"title":{},"body":{"index.html":{}}}],["redis",{"_index":443,"title":{},"body":{"injectables/RedisService.html":{}}}],["redis.service",{"_index":429,"title":{},"body":{"modules/RedisModule.html":{}}}],["redis/redis.module",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["redismodule",{"_index":33,"title":{"modules/RedisModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RedisModule.html":{},"modules.html":{},"overview.html":{}}}],["redisservice",{"_index":221,"title":{"injectables/RedisService.html":{}},"body":{"injectables/AuthService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"interfaces/Tokens.html":{},"coverage.html":{},"overview.html":{}}}],["reflect",{"_index":627,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["refresh_token",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{}}}],["refreshtoken",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refreshtoken(request",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["register",{"_index":566,"title":{},"body":{"injectables/UserService.html":{}}}],["related",{"_index":575,"title":{},"body":{"injectables/UserService.html":{}}}],["repository",{"_index":657,"title":{},"body":{"index.html":{}}}],["req",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["request",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"interfaces/Tokens.html":{},"controllers/UserController.html":{}}}],["request.cookies[\"refresh_token",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["request.headers.authorization",{"_index":187,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["request[\"user",{"_index":182,"title":{},"body":{"guards/AuthGuard.html":{}}}],["requesttimeoutexception",{"_index":360,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/SignInProvider.html":{}}}],["requesttimeoutexception(error",{"_index":403,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/SignInProvider.html":{}}}],["requiring",{"_index":703,"title":{},"body":{"index.html":{}}}],["res",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resources",{"_index":716,"title":{},"body":{"index.html":{}}}],["response",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{}}}],["response.clearcookie(\"access_token",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["response.clearcookie(\"refresh_token",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["response.cookie(\"access_token",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{}}}],["response.cookie(\"refresh_token",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{}}}],["result",{"_index":461,"title":{},"body":{"injectables/RedisService.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArchivesController.html":{},"modules/ArchivesModule.html":{},"injectables/ArchivesService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"classes/RoleDto.html":{},"injectables/SeedService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["return",{"_index":58,"title":{},"body":{"injectables/AppService.html":{},"controllers/ArchivesController.html":{},"injectables/ArchivesService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/RedisService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":56,"title":{},"body":{"injectables/AppService.html":{},"controllers/ArchivesController.html":{},"injectables/ArchivesService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/SeedService.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["role",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/RoleDto.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"injectables/UserService.html":{}}}],["role.id",{"_index":583,"title":{},"body":{"injectables/UserService.html":{}}}],["role.map((role",{"_index":582,"title":{},"body":{"injectables/UserService.html":{}}}],["roledto",{"_index":463,"title":{"classes/RoleDto.html":{}},"body":{"classes/RoleDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["roles",{"_index":387,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UserService.html":{}}}],["routes",{"_index":785,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["run",{"_index":663,"title":{},"body":{"index.html":{}}}],["runs",{"_index":686,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":630,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":331,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["samesite",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{}}}],["scalable",{"_index":650,"title":{},"body":{"index.html":{}}}],["secret",{"_index":208,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["secure",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{}}}],["seed",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SeedService.html":{}}}],["seeded",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["seedservice",{"_index":129,"title":{"injectables/SeedService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/SeedService.html":{},"coverage.html":{},"overview.html":{}}}],["server",{"_index":651,"title":{},"body":{"index.html":{}}}],["service",{"_index":573,"title":{},"body":{"injectables/UserService.html":{}}}],["setblacklisttoken",{"_index":434,"title":{},"body":{"injectables/RedisService.html":{}}}],["setblacklisttoken(token",{"_index":441,"title":{},"body":{"injectables/RedisService.html":{}}}],["setup",{"_index":659,"title":{},"body":{"index.html":{}}}],["side",{"_index":652,"title":{},"body":{"index.html":{}}}],["signin",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signin(dto",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["signin(signindto",{"_index":507,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["signindto",{"_index":114,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"coverage.html":{}}}],["signindto.password",{"_index":515,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["signinprovider",{"_index":195,"title":{"injectables/SignInProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"coverage.html":{},"overview.html":{}}}],["signoptions",{"_index":210,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":705,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArchivesController.html":{},"modules/ArchivesModule.html":{},"injectables/ArchivesService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"classes/RoleDto.html":{},"injectables/SeedService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["sponsors",{"_index":759,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":636,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../permissions.guard.ts",{"_index":637,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":50,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":55,"title":{},"body":{"injectables/AppService.html":{}}}],["src/archives/archives.controller.ts",{"_index":62,"title":{},"body":{"controllers/ArchivesController.html":{},"coverage.html":{}}}],["src/archives/archives.controller.ts:11",{"_index":67,"title":{},"body":{"controllers/ArchivesController.html":{}}}],["src/archives/archives.module.ts",{"_index":78,"title":{},"body":{"modules/ArchivesModule.html":{}}}],["src/archives/archives.service.ts",{"_index":81,"title":{},"body":{"injectables/ArchivesService.html":{},"coverage.html":{}}}],["src/archives/archives.service.ts:5",{"_index":85,"title":{},"body":{"injectables/ArchivesService.html":{}}}],["src/archives/archives.service.ts:8",{"_index":90,"title":{},"body":{"injectables/ArchivesService.html":{}}}],["src/auth/auth.controller.ts",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:27",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:35",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:44",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:52",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":554,"title":{},"body":{"modules/UserModule.html":{}}}],["src/auth/auth.module.ts",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":363,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/auth/auth.service.ts",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:100",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:104",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:141",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:160",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:169",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:23",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:33",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:37",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:49",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/signindto.dto.ts",{"_index":497,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/auth/dto/signindto.dto.ts:10",{"_index":501,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/dto/signindto.dto.ts:6",{"_index":499,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/guard/auth.guard",{"_index":536,"title":{},"body":{"controllers/UserController.html":{}}}],["src/auth/guard/auth.guard.ts",{"_index":154,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/auth/guard/auth.guard.ts:12",{"_index":159,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/auth/guard/auth.guard.ts:18",{"_index":162,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/auth/guard/auth.guard.ts:33",{"_index":166,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/auth/providers/bcrypt.provider.ts",{"_index":319,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.provider.ts:12",{"_index":328,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/bcrypt.provider.ts:7",{"_index":325,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/hashing.provider",{"_index":362,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/auth/providers/hashing.provider.ts",{"_index":406,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider.ts:5",{"_index":408,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.provider.ts:7",{"_index":409,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/sign",{"_index":503,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["src/guard/permissions.guard",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/guard/permissions.guard.ts",{"_index":599,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/main.ts",{"_index":601,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/prisma/prisma.module",{"_index":80,"title":{},"body":{"modules/ArchivesModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["src/prisma/prisma.module.ts",{"_index":413,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service",{"_index":92,"title":{},"body":{"injectables/ArchivesService.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/SeedService.html":{},"interfaces/Tokens.html":{},"injectables/UserService.html":{}}}],["src/prisma/prisma.service.ts",{"_index":415,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:13",{"_index":420,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:9",{"_index":421,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/redis/redis.module",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/redis/redis.module.ts",{"_index":428,"title":{},"body":{"modules/RedisModule.html":{}}}],["src/redis/redis.service",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["src/redis/redis.service.ts",{"_index":430,"title":{},"body":{"injectables/RedisService.html":{},"coverage.html":{}}}],["src/redis/redis.service.ts:19",{"_index":440,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/redis/redis.service.ts:23",{"_index":439,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/redis/redis.service.ts:27",{"_index":436,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/redis/redis.service.ts:31",{"_index":442,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/redis/redis.service.ts:36",{"_index":438,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/redis/redis.service.ts:6",{"_index":435,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/users/dto/createuserdto.dot.ts",{"_index":337,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/createuserdto.dot.ts:11",{"_index":344,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/dto/createuserdto.dot.ts:15",{"_index":346,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/dto/createuserdto.dot.ts:5",{"_index":342,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/dto/createuserdto.dot.ts:8",{"_index":340,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/dto/roledto.dto.ts",{"_index":464,"title":{},"body":{"classes/RoleDto.html":{},"coverage.html":{}}}],["src/users/dto/roledto.dto.ts:13",{"_index":468,"title":{},"body":{"classes/RoleDto.html":{}}}],["src/users/dto/roledto.dto.ts:9",{"_index":467,"title":{},"body":{"classes/RoleDto.html":{}}}],["src/users/providers/create",{"_index":352,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["src/users/providers/find",{"_index":395,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"coverage.html":{}}}],["src/users/users.controller.ts",{"_index":523,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:14",{"_index":530,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/users.controller.ts:19",{"_index":528,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/users.controller.ts:25",{"_index":533,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/users.module",{"_index":204,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/users/users.module.ts",{"_index":552,"title":{},"body":{"modules/UserModule.html":{}}}],["src/users/users.service",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{}}}],["src/users/users.service.ts",{"_index":558,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:12",{"_index":561,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/users.service.ts:20",{"_index":565,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/users.service.ts:26",{"_index":562,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/users.service.ts:50",{"_index":570,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/users.service.ts:64",{"_index":568,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":665,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":668,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":670,"title":{},"body":{"index.html":{}}}],["started",{"_index":641,"title":{"index.html":{}},"body":{"index.html":{}}}],["starter",{"_index":656,"title":{},"body":{"index.html":{}}}],["statements",{"_index":591,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":744,"title":{},"body":{"index.html":{}}}],["steps",{"_index":683,"title":{},"body":{"index.html":{}}}],["straightforward",{"_index":701,"title":{},"body":{"index.html":{}}}],["strict",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{}}}],["string",{"_index":57,"title":{},"body":{"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/RedisService.html":{},"classes/SignInDto.html":{},"interfaces/Tokens.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["sub",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["successfully",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/Tokens.html":{},"injectables/UserService.html":{}}}],["support",{"_index":723,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":775,"title":{},"body":{"modules.html":{}}}],["table",{"_index":608,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":607,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":684,"title":{},"body":{"index.html":{}}}],["test",{"_index":673,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":676,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":675,"title":{},"body":{"index.html":{}}}],["tests",{"_index":671,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":758,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":423,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":424,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.archivesservice.getall",{"_index":74,"title":{},"body":{"controllers/ArchivesController.html":{}}}],["this.authservice.gettokens",{"_index":391,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/SignInProvider.html":{}}}],["this.authservice.logout(request",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtoken(request",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signin(dto",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.updaterefreshtoken(newuser.id",{"_index":394,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.authservice.updaterefreshtoken(user.id",{"_index":519,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.authservice.validatetoken(token",{"_index":181,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.client",{"_index":445,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.client.get(`blacklist:${token",{"_index":462,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.client.on(\"error",{"_index":451,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.client.ping",{"_index":453,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.client.quit",{"_index":454,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.client.set(`blacklist:${token",{"_index":459,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.createuserprovider.create(createuserdto",{"_index":577,"title":{},"body":{"injectables/UserService.html":{}}}],["this.extracttokenfromheader(request",{"_index":174,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["this.findoneuserbyemailprovider.findoneuserbyemail",{"_index":368,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.findoneuserbyemailprovider.findoneuserbyemail(email",{"_index":587,"title":{},"body":{"injectables/UserService.html":{}}}],["this.gettokens(user.id",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["this.hashingprovider.hashpassword",{"_index":382,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.hashingprovider.verifypassword",{"_index":514,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.jwtservice.signasync",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["this.jwtservice.verify(token",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["this.jwtservice.verifyasync(refresh_token",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["this.prisma.user.create",{"_index":385,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.prisma.user.update",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["this.prismaservice.archives.findmany",{"_index":94,"title":{},"body":{"injectables/ArchivesService.html":{}}}],["this.prismaservice.permission.findmany",{"_index":489,"title":{},"body":{"injectables/SeedService.html":{}}}],["this.prismaservice.permission.upsert",{"_index":482,"title":{},"body":{"injectables/SeedService.html":{}}}],["this.prismaservice.role.findmany",{"_index":578,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prismaservice.role.upsert",{"_index":490,"title":{},"body":{"injectables/SeedService.html":{}}}],["this.prismaservice.user.findunique",{"_index":401,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/UserService.html":{}}}],["this.prismaservice.user.update",{"_index":580,"title":{},"body":{"injectables/UserService.html":{}}}],["this.redisservice.istokenblacklisted(token",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["this.redisservice.setblacklisttoken(token",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["this.seedservice.seed",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.signinprovider.signin(dto",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["this.updaterefreshtoken(decode.sub",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["this.updaterefreshtoken(user.id",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["this.userservice.assignrole(dto",{"_index":544,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.createuser(createuserdto",{"_index":541,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findonebyemail(email",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["this.userservice.findonebyemail(signindto.email",{"_index":509,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.userservice.profile(request?.user",{"_index":547,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":175,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"injectables/UserService.html":{}}}],["time",{"_index":737,"title":{},"body":{"index.html":{}}}],["token",{"_index":173,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/RedisService.html":{},"interfaces/Tokens.html":{}}}],["tokens",{"_index":251,"title":{"interfaces/Tokens.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{},"coverage.html":{}}}],["touch",{"_index":765,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":620,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/RedisService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{}}}],["try",{"_index":179,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/SignInProvider.html":{}}}],["tt1",{"_index":455,"title":{},"body":{"injectables/RedisService.html":{}}}],["twitter",{"_index":771,"title":{},"body":{"index.html":{}}}],["type",{"_index":88,"title":{},"body":{"injectables/ArchivesService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/RedisService.html":{},"classes/RoleDto.html":{},"injectables/SeedService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["typescript",{"_index":655,"title":{},"body":{"index.html":{}}}],["unable",{"_index":371,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["unauthorizedexception",{"_index":169,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{}}}],["unauthorizedexception(\"incorrect",{"_index":518,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["unauthorizedexception(\"no",{"_index":177,"title":{},"body":{"guards/AuthGuard.html":{}}}],["unauthorizedexception(\"refresh",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["unauthorizedexception(\"token",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["unauthorizedexception(\"user",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"interfaces/Tokens.html":{}}}],["unauthorizedexception(err.response.message",{"_index":185,"title":{},"body":{"guards/AuthGuard.html":{}}}],["undefined",{"_index":167,"title":{},"body":{"guards/AuthGuard.html":{}}}],["undefined)@get('logout",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["unit",{"_index":672,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":91,"title":{},"body":{"injectables/ArchivesService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/RedisService.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":784,"title":{},"body":{"properties.html":{}}}],["update",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SeedService.html":{},"interfaces/Tokens.html":{}}}],["update:users",{"_index":476,"title":{},"body":{"injectables/SeedService.html":{}}}],["updaterefreshtoken",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["updaterefreshtoken(userid",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["updates",{"_index":746,"title":{},"body":{"index.html":{}}}],["useclass",{"_index":214,"title":{},"body":{"modules/AuthModule.html":{}}}],["useguards",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard)@get('profile",{"_index":532,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(authguard)@useguards(authguard",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/RoleDto.html":{},"injectables/SeedService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user.email",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{}}}],["user.id",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{}}}],["user.name",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{}}}],["user.password",{"_index":516,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.profile_picture",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{}}}],["user.provider",{"_index":557,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.provider.ts",{"_index":353,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["user.provider.ts:15",{"_index":356,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:24",{"_index":358,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.roles[0].name",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{}}}],["user.roles[0].permissions",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{}}}],["usercontroller",{"_index":522,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdata",{"_index":520,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["userid",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"classes/RoleDto.html":{},"interfaces/Tokens.html":{}}}],["usermodule",{"_index":34,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["userpermissions",{"_index":495,"title":{},"body":{"injectables/SeedService.html":{}}}],["userpermissions.map((perm",{"_index":496,"title":{},"body":{"injectables/SeedService.html":{}}}],["users",{"_index":474,"title":{},"body":{"injectables/SeedService.html":{},"injectables/UserService.html":{}}}],["users.controller",{"_index":553,"title":{},"body":{"modules/UserModule.html":{}}}],["users.service",{"_index":535,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["users/users.module",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["userservice",{"_index":222,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"interfaces/Tokens.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":738,"title":{},"body":{"index.html":{}}}],["validate",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["validatetoken",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatetoken(token",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Tokens.html":{}}}],["validator",{"_index":350,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RoleDto.html":{},"classes/SignInDto.html":{},"dependencies.html":{}}}],["verify",{"_index":517,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["verifypassword",{"_index":322,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["verifypassword(data",{"_index":326,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["version",{"_index":782,"title":{},"body":{"properties.html":{}}}],["video",{"_index":730,"title":{},"body":{"index.html":{}}}],["visit",{"_index":720,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":733,"title":{},"body":{"index.html":{}}}],["watch",{"_index":666,"title":{},"body":{"index.html":{}}}],["website",{"_index":769,"title":{},"body":{"index.html":{}}}],["working",{"_index":719,"title":{},"body":{"index.html":{}}}],["world",{"_index":60,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":748,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":632,"title":{},"body":{"dependencies.html":{}}}],["you'd",{"_index":762,"title":{},"body":{"index.html":{}}}],["you're",{"_index":677,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport { AppService } from \"./app.service\";\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nArchivesModule\n\nArchivesModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nArchivesModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ArchivesModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            RedisModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { AppController } from \"./app.controller\";\nimport { AppService } from \"./app.service\";\nimport { AuthModule } from \"./auth/auth.module\";\nimport { PrismaService } from \"./prisma/prisma.service\";\nimport { PrismaModule } from \"./prisma/prisma.module\";\nimport { RedisModule } from \"./redis/redis.module\";\nimport { UserModule } from \"./users/users.module\";\nimport { ArchivesModule } from \"./archives/archives.module\";\n\n@Module({\n  imports: [AuthModule, PrismaModule, RedisModule, UserModule, ArchivesModule],\n  controllers: [AppController],\n  providers: [AppService, PrismaService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ArchivesController.html":{"url":"controllers/ArchivesController.html","title":"controller - ArchivesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ArchivesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/archives/archives.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                archives\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/archives/archives.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport { ArchivesService } from \"./archives.service\";\nimport { ApiTags } from \"@nestjs/swagger\";\n\n@Controller(\"archives\")\n@ApiTags(\"Archives\")\nexport class ArchivesController {\n  constructor(private archivesService: ArchivesService) {}\n\n  @Get()\n  getAll() {\n    return this.archivesService.getAll();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ArchivesModule.html":{"url":"modules/ArchivesModule.html","title":"module - ArchivesModule","body":"\n                   \n\n\n\n\n    Modules\n    ArchivesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ArchivesModule\n\n\n\ncluster_ArchivesModule_imports\n\n\n\ncluster_ArchivesModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nArchivesModule\n\nArchivesModule\n\nArchivesModule -->\n\nPrismaModule->ArchivesModule\n\n\n\n\n\nArchivesService\n\nArchivesService\n\nArchivesModule -->\n\nArchivesService->ArchivesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/archives/archives.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ArchivesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ArchivesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ArchivesController } from \"./archives.controller\";\nimport { ArchivesService } from \"./archives.service\";\nimport { PrismaModule } from \"src/prisma/prisma.module\";\n\n@Module({\n  imports: [PrismaModule],\n  controllers: [ArchivesController],\n  providers: [ArchivesService],\n})\nexport class ArchivesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ArchivesService.html":{"url":"injectables/ArchivesService.html","title":"injectable - ArchivesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ArchivesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/archives/archives.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/archives/archives.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/archives/archives.service.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PrismaService } from \"src/prisma/prisma.service\";\n\n@Injectable()\nexport class ArchivesService {\n  constructor(private readonly prismaService: PrismaService) {}\n\n  async getAll() {\n    return await this.prismaService.archives.findMany();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                logout\n                            \n                            \n                                    \n                                    Async\n                                refreshToken\n                            \n                            \n                                    \n                                    Async\n                                seed\n                            \n                            \n                                    \n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(request: Request, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@UseGuards(AuthGuard, undefined)@Get('logout')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                response\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(request: Request, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('refresh_token')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                response\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        seed\n                        \n                    \n                \n            \n            \n                \n                        \n                    seed()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('seed')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(dto: SignInDto, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('sign-in')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                response\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Post,\n  Req,\n  Res,\n  UseGuards,\n} from \"@nestjs/common\";\nimport { SignInDto } from \"./dto/SignInDto.dto\";\nimport { AuthService } from \"./auth.service\";\nimport { Request, Response } from \"express\";\nimport { AuthGuard } from \"./guard/auth.guard\";\nimport { SeedService } from \"../../prisma/seed.service\";\nimport { PermissionsGuard } from \"src/guard/permissions.guard\";\nimport { ApiTags } from \"@nestjs/swagger\";\n\n@Controller(\"auth\")\n@ApiTags(\"Auth\")\nexport class AuthController {\n  constructor(\n    private authService: AuthService,\n    private seedService: SeedService\n  ) {}\n\n  @Post(\"sign-in\")\n  async signIn(\n    @Body() dto: SignInDto,\n    @Res({ passthrough: true }) response: Response\n  ) {\n    return this.authService.signIn(dto, response);\n  }\n\n  @Get(\"refresh_token\")\n  async refreshToken(\n    @Req() request: Request,\n    @Res({ passthrough: true }) response: Response\n  ) {\n    return this.authService.refreshToken(request, response);\n  }\n  @UseGuards(AuthGuard)\n  @UseGuards(AuthGuard, PermissionsGuard(\"read:users\"))\n  @Get(\"logout\")\n  async logout(\n    @Req() request: Request,\n    @Res({ passthrough: true }) response: Response\n  ) {\n    return this.authService.logout(request, response);\n  }\n\n  @Post(\"seed\")\n  async seed() {\n    await this.seedService.seed();\n    return {\n      message: \"Database Seeded successfully\",\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guard/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractTokenFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guard/auth.guard.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/auth.guard.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractTokenFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractTokenFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/auth.guard.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { JwtService } from \"@nestjs/jwt\";\nimport {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from \"@nestjs/common\";\nimport { Request } from \"express\";\nimport { AuthService } from \"../auth.service\";\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly authService: AuthService\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n    const token = await this.extractTokenFromHeader(request);\n    if (!token) {\n      throw new UnauthorizedException(\"No token provided\");\n    }\n    try {\n      const payload = await this.authService.validateToken(token);\n      request[\"user\"] = payload;\n      return true;\n    } catch (err) {\n      throw new UnauthorizedException(err.response.message);\n    }\n  }\n\n  private extractTokenFromHeader(request: Request): string | undefined {\n    const authHeader = request.headers.authorization;\n    if (!authHeader) {\n      throw new UnauthorizedException();\n    }\n    const token = authHeader.split(\" \")[1];\n    return token;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAuthModule -->\n\nRedisModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nSeedService\n\nSeedService\n\nAuthModule -->\n\nSeedService->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            SeedService\n                        \n                        \n                            SignInProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            RedisModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            HashingProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from \"@nestjs/common\";\nimport { AuthController } from \"./auth.controller\";\nimport { AuthService } from \"./auth.service\";\nimport { PrismaModule } from \"src/prisma/prisma.module\";\nimport { JwtModule } from \"@nestjs/jwt\";\nimport { RedisModule } from \"src/redis/redis.module\";\nimport { SeedService } from \"../../prisma/seed.service\";\nimport { HashingProvider } from \"./providers/hashing.provider\";\nimport { BcryptProvider } from \"./providers/bcrypt.provider\";\nimport { UserModule } from \"src/users/users.module\";\nimport { SignInProvider } from \"./providers/sign-in.provider\";\n\n@Module({\n  imports: [\n    PrismaModule,\n    JwtModule.register({\n      secret: process.env.ACCESS_TOKEN_KEY,\n      signOptions: { expiresIn: process.env.ACCESS_TOKEN_EXPIRED_TIME },\n    }),\n    RedisModule,\n    forwardRef(() => UserModule),\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    SeedService,\n    {\n      provide: HashingProvider,\n      useClass: BcryptProvider,\n    },\n    SignInProvider,\n  ],\n  exports: [JwtModule, AuthService, HashingProvider],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                extractTokenFromHeader\n                            \n                            \n                                    Async\n                                getTokens\n                            \n                            \n                                    Async\n                                hashedPassword\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                updateRefreshToken\n                            \n                            \n                                    Async\n                                validateToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, jwtService: JwtService, redisService: RedisService, signInProvider: SignInProvider, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                        RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        signInProvider\n                                                  \n                                                        \n                                                                        SignInProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractTokenFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractTokenFromHeader(request: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:160\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTokens(userId: number, email: string, role: string, permissions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                role\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                permissions\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        hashedPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashedPassword(password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(request: Request, response: Response)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:141\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                response\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(request: Request, response: Response)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                response\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(dto: SignInDto, response: Response)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                response\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRefreshToken(userId: number, refresh_token: string | null)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                refresh_token\n                                            \n                                                        string | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:169\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ForbiddenException,\n  forwardRef,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from \"@nestjs/common\";\nimport { SignInDto } from \"./dto/SignInDto.dto\";\nimport { PrismaService } from \"src/prisma/prisma.service\";\nimport * as bcrypt from \"bcrypt\";\nimport { JwtService } from \"@nestjs/jwt\";\nimport { Request, Response } from \"express\";\nimport { RedisService } from \"src/redis/redis.service\";\nimport { SignInProvider } from \"./providers/sign-in.provider\";\nimport { UserService } from \"src/users/users.service\";\n\ninterface Tokens {\n  access_token: string;\n  refresh_token: string;\n}\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private prisma: PrismaService,\n    private readonly jwtService: JwtService,\n    private readonly redisService: RedisService,\n    private readonly signInProvider: SignInProvider,\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService\n  ) {}\n\n  async signIn(dto: SignInDto, response: Response) {\n    return await this.signInProvider.signIn(dto, response);\n  }\n\n  async updateRefreshToken(userId: number, refresh_token: string | null) {\n    return await this.prisma.user.update({\n      where: {\n        id: userId,\n      },\n      data: {\n        refresh_token,\n      },\n    });\n  }\n\n  // update refresh token\n  async refreshToken(request: Request, response: Response) {\n    const refresh_token = request.cookies[\"refresh_token\"];\n    if (!refresh_token) {\n      throw new UnauthorizedException(\"Refresh token not found\");\n    }\n\n    const { email } = await this.jwtService.verifyAsync(refresh_token, {\n      secret: process.env.REFRESH_TOKEN_KEY,\n    });\n\n    const user = await this.userService.findOneByEmail(email);\n    if (!user) {\n      throw new UnauthorizedException(\"User not found\");\n    }\n    const permissions = user.roles[0].permissions;\n    const role = user.roles[0].name;\n    const { access_token, refresh_token: new_refresh_token } =\n      await this.getTokens(user.id, user.email, role, permissions);\n\n    // update refresh token\n    this.updateRefreshToken(user.id, new_refresh_token);\n\n    response.cookie(\"refresh_token\", new_refresh_token, {\n      httpOnly: true,\n      secure: false,\n      sameSite: \"strict\",\n      maxAge: 1000 * 60 * 60 * 24 * 15,\n      path: \"/\",\n    });\n\n    response.cookie(\"access_token\", access_token, {\n      httpOnly: false,\n      secure: false,\n      sameSite: \"strict\",\n      maxAge: 15 * 60 * 1000, // 15 minutes\n      path: \"/\",\n    });\n\n    const filteredUser = {\n      id: user.id,\n      name: user.name,\n      email: user.email,\n      profile_picture: user.profile_picture,\n    };\n\n    return {\n      access_token,\n      user: filteredUser,\n    };\n  }\n\n  async hashedPassword(password: string) {\n    return await bcrypt.hash(password, 10);\n  }\n\n  async getTokens(\n    userId: number,\n    email: string,\n    role: string,\n    permissions\n  ): Promise {\n    const [access_token, refresh_token] = await Promise.all([\n      this.jwtService.signAsync(\n        {\n          sub: userId,\n          email,\n          role,\n          permissions: permissions.map((permission) => permission.name),\n        },\n        {\n          secret: process.env.ACCESS_TOKEN_KEY,\n          expiresIn: process.env.ACCESS_TOKEN_EXPIRED_TIME,\n        }\n      ),\n\n      this.jwtService.signAsync(\n        {\n          sub: userId,\n          email,\n          role,\n          permissions: permissions.map((permission) => permission.name),\n        },\n        {\n          secret: process.env.REFRESH_TOKEN_KEY,\n          expiresIn: process.env.REFRESH_TOKEN_EXPIRED_TIME,\n        }\n      ),\n    ]);\n    return { access_token, refresh_token };\n  }\n\n  // logout\n  async logout(request: Request, response: Response) {\n    const token = await this.extractTokenFromHeader(request);\n\n    if (token) {\n      const decode = this.jwtService.verify(token, {\n        secret: process.env.ACCESS_TOKEN_KEY,\n      });\n      await this.updateRefreshToken(decode.sub, null);\n      const expiresAt = decode.exp * 1000;\n      await this.redisService.setBlackListToken(token, expiresAt);\n    }\n    response.clearCookie(\"refresh_token\");\n    response.clearCookie(\"access_token\");\n\n    return {\n      message: \"Logged out successfully\",\n    };\n  }\n\n  private extractTokenFromHeader(request: any): string | null {\n    const authHeader = request.headers.authorization;\n    if (authHeader && authHeader.startsWith(\"Bearer \")) {\n      return authHeader.split(\" \")[1]; // Extract token from \"Bearer \"\n    }\n    return null;\n  }\n\n  // validate token\n  async validateToken(token: string) {\n    const isBlackListed = await this.redisService.isTokenBlackListed(token);\n    if (isBlackListed) {\n      throw new UnauthorizedException(\"Token is blacklisted\");\n    }\n    return this.jwtService.verifyAsync(token, {\n      secret: process.env.ACCESS_TOKEN_KEY,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/bcrypt.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                hashPassword\n                            \n                            \n                                verifyPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifyPassword\n                        \n                    \n                \n            \n            \n                \nverifyPassword(data: string | Buffer, hash: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                hash\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import * as bcrypt from \"bcrypt\";\nimport { Injectable } from \"@nestjs/common\";\nimport { HashingProvider } from \"./hashing.provider\";\n\n@Injectable()\nexport class BcryptProvider implements HashingProvider {\n  public async hashPassword(data: string | Buffer): Promise {\n    // Generate a salt and hash the password\n    const salt = await bcrypt.genSalt(10);\n    return bcrypt.hash(data, salt);\n  }\n  verifyPassword(data: string | Buffer, hash: string): Promise {\n    return bcrypt.compare(data, hash);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/CreateUserDto.dot.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/CreateUserDto.dot.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/CreateUserDto.dot.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/CreateUserDto.dot.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/CreateUserDto.dot.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsNumber, Min, MinLength } from \"class-validator\";\n\nexport class CreateUserDto {\n  @IsNotEmpty()\n  name: string;\n\n  @IsEmail()\n  email: string;\n\n  @MinLength(6)\n  password: string;\n\n  @IsNotEmpty()\n  @IsNumber()\n  role: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserProvider.html":{"url":"injectables/CreateUserProvider.html","title":"injectable - CreateUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, hashingProvider: HashingProvider, authService: AuthService, findOneUserByEmailProvider: FindOneUserByEmailProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-user.provider.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneUserByEmailProvider\n                                                  \n                                                        \n                                                                        FindOneUserByEmailProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-user.provider.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  forwardRef,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n} from \"@nestjs/common\";\nimport { CreateUserDto } from \"../dto/CreateUserDto.dot\";\nimport { PrismaService } from \"src/prisma/prisma.service\";\nimport { HashingProvider } from \"src/auth/providers/hashing.provider\";\nimport { AuthService } from \"src/auth/auth.service\";\nimport { FindOneUserByEmailProvider } from \"./find-one-user-by-email.provider\";\n\n@Injectable()\nexport class CreateUserProvider {\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly hashingProvider: HashingProvider,\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n    private readonly findOneUserByEmailProvider: FindOneUserByEmailProvider\n  ) {}\n\n  public async create(createUserDto: CreateUserDto) {\n    let existingUser;\n    try {\n      existingUser = await this.findOneUserByEmailProvider.findOneUserByEmail(\n        createUserDto.email\n      );\n    } catch (error) {\n      throw new RequestTimeoutException(\n        \"Unable to process your request at the moment. Please try again later.\",\n        {\n          description: \"Error connecting to the database\",\n        }\n      );\n    }\n    if (existingUser) {\n      throw new BadRequestException(\n        \"The user already exists, please check your email\"\n      );\n    }\n\n    const password = await this.hashingProvider.hashPassword(\n      createUserDto.password\n    );\n    const newUser = await this.prisma.user.create({\n      data: {\n        name: createUserDto.name,\n        email: createUserDto.email,\n        password: password,\n        roles: {\n          connect: [{ id: Number(createUserDto.role) }],\n        },\n      },\n    });\n\n    const permissions = [];\n    const role = \"admin\";\n    const { access_token, refresh_token } = await this.authService.getTokens(\n      newUser.id,\n      newUser.email,\n      role,\n      permissions\n    );\n\n    this.authService.updateRefreshToken(newUser.id, refresh_token);\n\n    return {\n      access_token,\n      refresh_token,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneUserByEmailProvider.html":{"url":"injectables/FindOneUserByEmailProvider.html","title":"injectable - FindOneUserByEmailProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneUserByEmailProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-one-user-by-email.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneUserByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-one-user-by-email.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneUserByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-one-user-by-email.provider.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  RequestTimeoutException,\n  UnauthorizedException,\n} from \"@nestjs/common\";\nimport { PrismaService } from \"src/prisma/prisma.service\";\n\n@Injectable()\nexport class FindOneUserByEmailProvider {\n  constructor(private readonly prismaService: PrismaService) {}\n\n  public async findOneUserByEmail(email: string) {\n    let user;\n    try {\n      user = await this.prismaService.user.findUnique({\n        where: {\n          email: email,\n        },\n        include: {\n          roles: {\n            include: {\n              permissions: true,\n            },\n          },\n        },\n      });\n    } catch (error) {\n      throw new RequestTimeoutException(error, {\n        description: \"Could not fetch the user\",\n      });\n    }\n\n    if (!user) {\n      throw new UnauthorizedException(\"User does not exist\");\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                hashPassword\n                            \n                            \n                                    Abstract\n                                verifyPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        verifyPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyPassword(data: string | Buffer, hash: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                hash\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\n@Injectable()\nexport abstract class HashingProvider {\n  abstract hashPassword(data: string | Buffer): Promise;\n\n  abstract verifyPassword(\n    data: string | Buffer,\n    hash: string\n  ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma/prisma.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma/prisma.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService\n  extends PrismaClient\n  implements OnModuleInit, OnModuleDestroy\n{\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async onModuleDestroy() {\n    await this.$disconnect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RedisModule.html":{"url":"modules/RedisModule.html","title":"module - RedisModule","body":"\n                   \n\n\n\n\n    Modules\n    RedisModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RedisModule\n\n\n\ncluster_RedisModule_exports\n\n\n\ncluster_RedisModule_providers\n\n\n\n\nRedisService \n\nRedisService \n\n\n\nRedisModule\n\nRedisModule\n\nRedisService  -->\n\nRedisModule->RedisService \n\n\n\n\n\nRedisService\n\nRedisService\n\nRedisModule -->\n\nRedisService->RedisModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/redis/redis.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RedisService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RedisService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { RedisService } from \"./redis.service\";\n\n@Module({\n  providers: [RedisService],\n  exports: [RedisService],\n})\nexport class RedisModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RedisService.html":{"url":"injectables/RedisService.html","title":"injectable - RedisService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RedisService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/redis/redis.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getClient\n                            \n                            \n                                    Async\n                                isTokenBlackListed\n                            \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                setBlackListToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/redis/redis.service.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    getClient()\n                \n            \n\n\n                    \n                        \n                            Defined in src/redis/redis.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isTokenBlackListed\n                        \n                    \n                \n            \n            \n                \n                        \n                    isTokenBlackListed(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/redis/redis.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/redis/redis.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/redis/redis.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setBlackListToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    setBlackListToken(token: string, expiresAt: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/redis/redis.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiresAt\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Redis\n\n                    \n                \n                    \n                        \n                                Defined in src/redis/redis.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleDestroy, OnModuleInit } from \"@nestjs/common\";\nimport Redis from \"ioredis\";\n\n@Injectable()\nexport class RedisService implements OnModuleInit, OnModuleDestroy {\n  private client: Redis;\n\n  constructor() {\n    this.client = new Redis({\n      host: \"localhost\",\n      port: 6379,\n      password: \"Kam\",\n    });\n    this.client.on(\"error\", (err) => {\n      console.log(\"Redis Error:\", err);\n    });\n  }\n\n  async onModuleInit() {\n    await this.client.ping();\n  }\n\n  async onModuleDestroy() {\n    await this.client.quit();\n  }\n\n  async getClient() {\n    return this.client;\n  }\n\n  async setBlackListToken(token: string, expiresAt: number) {\n    const tt1 = Math.max(0, Math.floor((expiresAt - Date.now()) / 1000));\n    await this.client.set(`blacklist:${token}`, 1, \"EX\", tt1);\n  }\n\n  async isTokenBlackListed(token: string): Promise {\n    const result = await this.client.get(`blacklist:${token}`);\n    return result === null ? false : true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoleDto.html":{"url":"classes/RoleDto.html","title":"class - RoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/RoleDto.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for assigning a role to a user.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                role\n                            \n                            \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/RoleDto.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/RoleDto.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsNumber } from \"class-validator\";\n\n/**\n * DTO for assigning a role to a user.\n */\nexport class RoleDto {\n  @IsNumber()\n  @IsNotEmpty()\n  role: number;\n\n  @IsNumber()\n  @IsNotEmpty()\n  userId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SeedService.html":{"url":"injectables/SeedService.html","title":"injectable - SeedService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SeedService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            prisma/seed.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                seed\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in prisma/seed.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        seed\n                        \n                    \n                \n            \n            \n                \n                        \n                    seed()\n                \n            \n\n\n                    \n                        \n                            Defined in prisma/seed.service.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PrismaService } from \"src/prisma/prisma.service\";\n\n@Injectable()\nexport class SeedService {\n  constructor(private readonly prismaService: PrismaService) {}\n\n  async seed() {\n    const permissions = [\n      { name: \"creat:users\", group_name: \"users\", label: \"Create User\" },\n      { name: \"update:users\", group_name: \"users\", label: \"Update User\" },\n      { name: \"delete:users\", group_name: \"users\", label: \"Delete User\" },\n      { name: \"read:users\", group_name: \"users\", label: \"Read User\" },\n    ];\n\n    for (const perm of permissions) {\n      await this.prismaService.permission.upsert({\n        where: { name: perm.name },\n        update: {},\n        create: {\n          name: perm.name,\n          group_name: perm.group_name,\n          label: perm.label,\n          createdAt: new Date(),\n        },\n      });\n    }\n\n    const adminPermissions = await this.prismaService.permission.findMany();\n    await this.prismaService.role.upsert({\n      where: { name: \"admin\" },\n      update: {},\n      create: {\n        name: \"admin\",\n        permissions: {\n          connect: adminPermissions.map((perm) => ({ id: perm.id })),\n        },\n        createdBy: 1,\n        created_at: new Date(),\n      },\n    });\n\n    const userPermissions = await this.prismaService.permission.findMany({\n      where: { name: { in: [\"read:users\"] } },\n    });\n\n    await this.prismaService.role.upsert({\n      where: { name: \"user\" },\n      update: {},\n      create: {\n        name: \"user\",\n        permissions: {\n          connect: userPermissions.map((perm) => ({ id: perm.id })),\n        },\n        createdBy: 1,\n        created_at: new Date(),\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/SignInDto.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/SignInDto.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/SignInDto.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from \"class-validator\";\n\nexport class SignInDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SignInProvider.html":{"url":"injectables/SignInProvider.html","title":"injectable - SignInProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SignInProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/sign-in.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, hashingProvider: HashingProvider, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/sign-in.provider.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto, response: Response)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/sign-in.provider.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                response\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ForbiddenException,\n  forwardRef,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n  UnauthorizedException,\n} from \"@nestjs/common\";\nimport { SignInDto } from \"../dto/SignInDto.dto\";\nimport { UserService } from \"src/users/users.service\";\nimport { HashingProvider } from \"./hashing.provider\";\nimport { AuthService } from \"../auth.service\";\nimport { Response } from \"express\";\n\n@Injectable()\nexport class SignInProvider {\n  constructor(\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n    private readonly hashingProvider: HashingProvider,\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService\n  ) {}\n\n  public async signIn(signInDto: SignInDto, response: Response) {\n    const user = await this.userService.findOneByEmail(signInDto.email);\n    if (!user) {\n      throw new ForbiddenException(\"Invalid Credentials\");\n    }\n    let isEqual: boolean = false;\n    try {\n      isEqual = await this.hashingProvider.verifyPassword(\n        signInDto.password,\n        user.password\n      );\n    } catch (error) {\n      throw new RequestTimeoutException(error, {\n        description: \"Could not verify password\",\n      });\n    }\n    if (!isEqual) {\n      throw new UnauthorizedException(\"Incorrect password\");\n    }\n    const permissions = user.roles[0].permissions;\n    const role = user.roles[0].name;\n    const { access_token, refresh_token } = await this.authService.getTokens(\n      user.id,\n      user.email,\n      role,\n      permissions\n    );\n    await this.authService.updateRefreshToken(user.id, refresh_token);\n    response.cookie(\"refresh_token\", refresh_token, {\n      httpOnly: true,\n      secure: false,\n      sameSite: \"strict\",\n      maxAge: 1000 * 60 * 60 * 24 * 15,\n      path: \"/\",\n    });\n    response.cookie(\"access_token\", access_token, {\n      httpOnly: false,\n      secure: false,\n      sameSite: \"strict\",\n      maxAge: 15 * 60 * 1000, // 15 minutes\n      path: \"/\",\n    });\n    const userData = {\n      id: user.id,\n      name: user.name,\n      email: user.email,\n      profile_picture: user.profile_picture,\n    };\n    return {\n      access_token,\n      user: userData,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Tokens.html":{"url":"interfaces/Tokens.html","title":"interface - Tokens","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Tokens\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            access_token\n                                        \n                                \n                                \n                                        \n                                            refresh_token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        access_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        access_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refresh_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refresh_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  ForbiddenException,\n  forwardRef,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from \"@nestjs/common\";\nimport { SignInDto } from \"./dto/SignInDto.dto\";\nimport { PrismaService } from \"src/prisma/prisma.service\";\nimport * as bcrypt from \"bcrypt\";\nimport { JwtService } from \"@nestjs/jwt\";\nimport { Request, Response } from \"express\";\nimport { RedisService } from \"src/redis/redis.service\";\nimport { SignInProvider } from \"./providers/sign-in.provider\";\nimport { UserService } from \"src/users/users.service\";\n\ninterface Tokens {\n  access_token: string;\n  refresh_token: string;\n}\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private prisma: PrismaService,\n    private readonly jwtService: JwtService,\n    private readonly redisService: RedisService,\n    private readonly signInProvider: SignInProvider,\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService\n  ) {}\n\n  async signIn(dto: SignInDto, response: Response) {\n    return await this.signInProvider.signIn(dto, response);\n  }\n\n  async updateRefreshToken(userId: number, refresh_token: string | null) {\n    return await this.prisma.user.update({\n      where: {\n        id: userId,\n      },\n      data: {\n        refresh_token,\n      },\n    });\n  }\n\n  // update refresh token\n  async refreshToken(request: Request, response: Response) {\n    const refresh_token = request.cookies[\"refresh_token\"];\n    if (!refresh_token) {\n      throw new UnauthorizedException(\"Refresh token not found\");\n    }\n\n    const { email } = await this.jwtService.verifyAsync(refresh_token, {\n      secret: process.env.REFRESH_TOKEN_KEY,\n    });\n\n    const user = await this.userService.findOneByEmail(email);\n    if (!user) {\n      throw new UnauthorizedException(\"User not found\");\n    }\n    const permissions = user.roles[0].permissions;\n    const role = user.roles[0].name;\n    const { access_token, refresh_token: new_refresh_token } =\n      await this.getTokens(user.id, user.email, role, permissions);\n\n    // update refresh token\n    this.updateRefreshToken(user.id, new_refresh_token);\n\n    response.cookie(\"refresh_token\", new_refresh_token, {\n      httpOnly: true,\n      secure: false,\n      sameSite: \"strict\",\n      maxAge: 1000 * 60 * 60 * 24 * 15,\n      path: \"/\",\n    });\n\n    response.cookie(\"access_token\", access_token, {\n      httpOnly: false,\n      secure: false,\n      sameSite: \"strict\",\n      maxAge: 15 * 60 * 1000, // 15 minutes\n      path: \"/\",\n    });\n\n    const filteredUser = {\n      id: user.id,\n      name: user.name,\n      email: user.email,\n      profile_picture: user.profile_picture,\n    };\n\n    return {\n      access_token,\n      user: filteredUser,\n    };\n  }\n\n  async hashedPassword(password: string) {\n    return await bcrypt.hash(password, 10);\n  }\n\n  async getTokens(\n    userId: number,\n    email: string,\n    role: string,\n    permissions\n  ): Promise {\n    const [access_token, refresh_token] = await Promise.all([\n      this.jwtService.signAsync(\n        {\n          sub: userId,\n          email,\n          role,\n          permissions: permissions.map((permission) => permission.name),\n        },\n        {\n          secret: process.env.ACCESS_TOKEN_KEY,\n          expiresIn: process.env.ACCESS_TOKEN_EXPIRED_TIME,\n        }\n      ),\n\n      this.jwtService.signAsync(\n        {\n          sub: userId,\n          email,\n          role,\n          permissions: permissions.map((permission) => permission.name),\n        },\n        {\n          secret: process.env.REFRESH_TOKEN_KEY,\n          expiresIn: process.env.REFRESH_TOKEN_EXPIRED_TIME,\n        }\n      ),\n    ]);\n    return { access_token, refresh_token };\n  }\n\n  // logout\n  async logout(request: Request, response: Response) {\n    const token = await this.extractTokenFromHeader(request);\n\n    if (token) {\n      const decode = this.jwtService.verify(token, {\n        secret: process.env.ACCESS_TOKEN_KEY,\n      });\n      await this.updateRefreshToken(decode.sub, null);\n      const expiresAt = decode.exp * 1000;\n      await this.redisService.setBlackListToken(token, expiresAt);\n    }\n    response.clearCookie(\"refresh_token\");\n    response.clearCookie(\"access_token\");\n\n    return {\n      message: \"Logged out successfully\",\n    };\n  }\n\n  private extractTokenFromHeader(request: any): string | null {\n    const authHeader = request.headers.authorization;\n    if (authHeader && authHeader.startsWith(\"Bearer \")) {\n      return authHeader.split(\" \")[1]; // Extract token from \"Bearer \"\n    }\n    return null;\n  }\n\n  // validate token\n  async validateToken(token: string) {\n    const isBlackListed = await this.redisService.isTokenBlackListed(token);\n    if (isBlackListed) {\n      throw new UnauthorizedException(\"Token is blacklisted\");\n    }\n    return this.jwtService.verifyAsync(token, {\n      secret: process.env.ACCESS_TOKEN_KEY,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                assignRole\n                            \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                profile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        assignRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    assignRole(dto: RoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('assign_role')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            RoleDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        profile\n                        \n                    \n                \n            \n            \n                \n                        \n                    profile(request: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Req, UseGuards } from \"@nestjs/common\";\nimport { RoleDto } from \"./dto/RoleDto.dto\";\nimport { UserService } from \"./users.service\";\nimport { AuthGuard } from \"src/auth/guard/auth.guard\";\nimport { ApiTags } from \"@nestjs/swagger\";\nimport { CreateUserDto } from \"./dto/CreateUserDto.dot\";\n\n@Controller(\"user\")\n@ApiTags(\"User\")\nexport class UserController {\n  constructor(private userService: UserService) {}\n\n  @Post(\"create\")\n  async create(@Body() createUserDto: CreateUserDto) {\n    return this.userService.createUser(createUserDto);\n  }\n\n  @Post(\"assign_role\")\n  async assignRole(@Body() dto: RoleDto) {\n    return this.userService.assignRole(dto);\n  }\n\n  @UseGuards(AuthGuard)\n  @Get(\"profile\")\n  async profile(@Req() request: any) {\n    return await this.userService.profile(request?.user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_exports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\n\n\nCreateUserProvider \n\nCreateUserProvider \n\nCreateUserProvider  -->\n\nUserModule->CreateUserProvider \n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUserModule -->\n\nCreateUserProvider->UserModule\n\n\n\n\n\nFindOneUserByEmailProvider\n\nFindOneUserByEmailProvider\n\nUserModule -->\n\nFindOneUserByEmailProvider->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateUserProvider\n                        \n                        \n                            FindOneUserByEmailProvider\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CreateUserProvider\n                        \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from \"@nestjs/common\";\nimport { UserController } from \"./users.controller\";\nimport { UserService } from \"./users.service\";\nimport { PrismaModule } from \"src/prisma/prisma.module\";\nimport { AuthModule } from \"src/auth/auth.module\";\nimport { FindOneUserByEmailProvider } from \"./providers/find-one-user-by-email.provider\";\nimport { CreateUserProvider } from \"./providers/create-user.provider\";\n\n@Module({\n  imports: [PrismaModule, forwardRef(() => AuthModule)],\n  controllers: [UserController],\n  providers: [UserService, FindOneUserByEmailProvider, CreateUserProvider],\n  exports: [CreateUserProvider, UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                assignRole\n                            \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                profile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService, createUserProvider: CreateUserProvider, findOneUserByEmailProvider: FindOneUserByEmailProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createUserProvider\n                                                  \n                                                        \n                                                                        CreateUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneUserByEmailProvider\n                                                  \n                                                        \n                                                                        FindOneUserByEmailProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        assignRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    assignRole(dto: RoleDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:26\n                        \n                    \n\n\n            \n                \n                        Assign roles to the users\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            RoleDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:20\n                        \n                    \n\n\n            \n                \n                        Register a new user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        profile\n                        \n                    \n                \n            \n            \n                \n                        \n                    profile(arg)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:50\n                        \n                    \n\n\n            \n                \n                        Get user profile\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                arg\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { RoleDto } from \"./dto/RoleDto.dto\";\nimport { PrismaService } from \"src/prisma/prisma.service\";\nimport { CreateUserDto } from \"./dto/CreateUserDto.dot\";\nimport { CreateUserProvider } from \"./providers/create-user.provider\";\nimport { FindOneUserByEmailProvider } from \"./providers/find-one-user-by-email.provider\";\n\n@Injectable()\n/**\n * Service to handle user-related operations.\n */\nexport class UserService {\n  constructor(\n    private readonly prismaService: PrismaService,\n    private readonly createUserProvider: CreateUserProvider,\n    private readonly findOneUserByEmailProvider: FindOneUserByEmailProvider\n  ) {}\n\n  /** Register a new user */\n  async createUser(createUserDto: CreateUserDto) {\n    return this.createUserProvider.create(createUserDto);\n  }\n  /**\n   * Assign roles to the users\n   */\n  async assignRole(dto: RoleDto) {\n    const role = await this.prismaService.role.findMany({\n      where: {\n        id: dto.role,\n      },\n    });\n    const user = await this.prismaService.user.update({\n      where: {\n        id: dto.userId,\n      },\n      data: {\n        roles: {\n          connect: role.map((role) => ({ id: role.id })),\n        },\n      },\n    });\n    return {\n      message: \"Role Assigned Successfully\",\n    };\n  }\n\n  /**\n   * Get user profile\n   */\n  async profile(arg) {\n    const user = await this.prismaService.user.findUnique({\n      where: {\n        email: arg.email,\n      },\n    });\n    if (!user) {\n      throw new NotFoundException(\"User not found\");\n    }\n    return {\n      user,\n    };\n  }\n\n  async findOneByEmail(email: string) {\n    return await this.findOneUserByEmailProvider.findOneUserByEmail(email);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                prisma/seed.service.ts\n            \n            injectable\n            SeedService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/archives/archives.controller.ts\n            \n            controller\n            ArchivesController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/archives/archives.service.ts\n            \n            injectable\n            ArchivesService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            interface\n            Tokens\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/SignInDto.dto.ts\n            \n            class\n            SignInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guard/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/providers/bcrypt.provider.ts\n            \n            injectable\n            BcryptProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.provider.ts\n            \n            injectable\n            HashingProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/sign-in.provider.ts\n            \n            injectable\n            SignInProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guard/permissions.guard.ts\n            \n            function\n            PermissionsGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/redis/redis.service.ts\n            \n            injectable\n            RedisService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/dto/CreateUserDto.dot.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dto/RoleDto.dto.ts\n            \n            class\n            RoleDto\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/users/providers/create-user.provider.ts\n            \n            injectable\n            CreateUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-one-user-by-email.provider.ts\n            \n            injectable\n            FindOneUserByEmailProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UserService\n            \n                50 %\n                (3/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : 1.1.23\n        \n            @nestjs/common : ^11.1.0\n        \n            @nestjs/core : ^11.1.0\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @prisma/client : 6.7.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            cookie-parser : ^1.4.7\n        \n            ioredis : ^5.6.1\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            yarn : ^1.22.22\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            PermissionsGuard   (src/.../permissions.guard.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/guard/permissions.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PermissionsGuard\n                        \n                    \n                \n            \n            \n                \nPermissionsGuard(permission: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                permission\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\noffice archive branch started\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g @nestjs/mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ArchivesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RedisModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_ArchivesModule\n\n\n\ncluster_ArchivesModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_RedisModule\n\n\n\ncluster_RedisModule_exports\n\n\n\ncluster_RedisModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nArchivesModule\n\nArchivesModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nArchivesModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nArchivesModule -->\n\nPrismaModule->ArchivesModule\n\n\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAuthModule -->\n\nRedisModule->AuthModule\n\n\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nRedisService \n\nRedisService \n\nRedisService  -->\n\nRedisModule->RedisService \n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nCreateUserProvider \n\nCreateUserProvider \n\nCreateUserProvider  -->\n\nUserModule->CreateUserProvider \n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nArchivesService\n\nArchivesService\n\nArchivesModule -->\n\nArchivesService->ArchivesModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nSeedService\n\nSeedService\n\nAuthModule -->\n\nSeedService->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\nRedisService\n\nRedisService\n\nRedisModule -->\n\nRedisService->RedisModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUserModule -->\n\nCreateUserProvider->UserModule\n\n\n\n\n\nFindOneUserByEmailProvider\n\nFindOneUserByEmailProvider\n\nUserModule -->\n\nFindOneUserByEmailProvider->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
